namespace JetBrains.ReSharper.Plugins.Spring.Parser.Psi.Node
{
    public static class PascalNodeTypes
    {
        public static readonly PascalAntlrNodeType ActualParameter = new PascalAntlrNodeType("PASCAL_ACTUAL_PARAMETER", 0);
        public static readonly PascalAntlrNodeType Additiveoperator = new PascalAntlrNodeType("PASCAL_ADDITIVEOPERATOR", 1);
        public static readonly PascalAntlrNodeType ArrayType = new PascalAntlrNodeType("PASCAL_ARRAY_TYPE", 2);
        public static readonly PascalAntlrNodeType AssignmentStatement = new PascalAntlrNodeType("PASCAL_ASSIGNMENT_STATEMENT", 3);
        public static readonly PascalAntlrNodeType BaseType = new PascalAntlrNodeType("PASCAL_BASE_TYPE", 4);
        public static readonly PascalAntlrNodeType Block = new PascalAntlrNodeType("PASCAL_BLOCK", 5);
        public static readonly PascalAntlrNodeType Bool = new PascalAntlrNodeType("PASCAL_BOOL", 6);
        public static readonly PascalAntlrNodeType CaseListElement = new PascalAntlrNodeType("PASCAL_CASE_LIST_ELEMENT", 7);
        public static readonly PascalAntlrNodeType CaseStatement = new PascalAntlrNodeType("PASCAL_CASE_STATEMENT", 8);
        public static readonly PascalAntlrNodeType ComponentType = new PascalAntlrNodeType("PASCAL_COMPONENT_TYPE", 9);
        public static readonly PascalAntlrNodeType CompoundStatement = new PascalAntlrNodeType("PASCAL_COMPOUND_STATEMENT", 10);
        public static readonly PascalAntlrNodeType ConditionalStatement = new PascalAntlrNodeType("PASCAL_CONDITIONAL_STATEMENT", 11);
        public static readonly PascalAntlrNodeType ConstList = new PascalAntlrNodeType("PASCAL_CONST_LIST", 12);
        public static readonly PascalAntlrNodeType Constant = new PascalAntlrNodeType("PASCAL_CONSTANT", 13);
        public static readonly PascalAntlrNodeType ConstantChr = new PascalAntlrNodeType("PASCAL_CONSTANT_CHR", 14);
        public static readonly PascalAntlrNodeType ConstantDefinition = new PascalAntlrNodeType("PASCAL_CONSTANT_DEFINITION", 15);
        public static readonly PascalAntlrNodeType ConstantDefinitionPart = new PascalAntlrNodeType("PASCAL_CONSTANT_DEFINITION_PART", 16);
        public static readonly PascalAntlrNodeType Element = new PascalAntlrNodeType("PASCAL_ELEMENT", 17);
        public static readonly PascalAntlrNodeType ElementList = new PascalAntlrNodeType("PASCAL_ELEMENT_LIST", 18);
        public static readonly PascalAntlrNodeType Empty = new PascalAntlrNodeType("PASCAL_EMPTY", 19);
        public static readonly PascalAntlrNodeType EmptyStatement = new PascalAntlrNodeType("PASCAL_EMPTY_STATEMENT", 20);
        public static readonly PascalAntlrNodeType Expression = new PascalAntlrNodeType("PASCAL_EXPRESSION", 21);
        public static readonly PascalAntlrNodeType Factor = new PascalAntlrNodeType("PASCAL_FACTOR", 22);
        public static readonly PascalAntlrNodeType FieldList = new PascalAntlrNodeType("PASCAL_FIELD_LIST", 23);
        public static readonly PascalAntlrNodeType FileType = new PascalAntlrNodeType("PASCAL_FILE_TYPE", 24);
        public static readonly PascalAntlrNodeType FinalValue = new PascalAntlrNodeType("PASCAL_FINAL_VALUE", 25);
        public static readonly PascalAntlrNodeType FixedPart = new PascalAntlrNodeType("PASCAL_FIXED_PART", 26);
        public static readonly PascalAntlrNodeType ForList = new PascalAntlrNodeType("PASCAL_FOR_LIST", 27);
        public static readonly PascalAntlrNodeType ForStatement = new PascalAntlrNodeType("PASCAL_FOR_STATEMENT", 28);
        public static readonly PascalAntlrNodeType FormalParameterList = new PascalAntlrNodeType("PASCAL_FORMAL_PARAMETER_LIST", 29);
        public static readonly PascalAntlrNodeType FormalParameterSection = new PascalAntlrNodeType("PASCAL_FORMAL_PARAMETER_SECTION", 30);
        public static readonly PascalAntlrNodeType FunctionDeclaration = new PascalAntlrNodeType("PASCAL_FUNCTION_DECLARATION", 31);
        public static readonly PascalAntlrNodeType FunctionDesignator = new PascalAntlrNodeType("PASCAL_FUNCTION_DESIGNATOR", 32);
        public static readonly PascalAntlrNodeType FunctionType = new PascalAntlrNodeType("PASCAL_FUNCTION_TYPE", 33);
        public static readonly PascalAntlrNodeType GotoStatement = new PascalAntlrNodeType("PASCAL_GOTO_STATEMENT", 34);
        public static readonly PascalAntlrNodeType Identifier = new PascalAntlrNodeType("PASCAL_IDENTIFIER", 35);
        public static readonly PascalAntlrNodeType IdentifierList = new PascalAntlrNodeType("PASCAL_IDENTIFIER_LIST", 36);
        public static readonly PascalAntlrNodeType IfStatement = new PascalAntlrNodeType("PASCAL_IF_STATEMENT", 37);
        public static readonly PascalAntlrNodeType IndexType = new PascalAntlrNodeType("PASCAL_INDEX_TYPE", 38);
        public static readonly PascalAntlrNodeType InitialValue = new PascalAntlrNodeType("PASCAL_INITIAL_VALUE", 39);
        public static readonly PascalAntlrNodeType Label = new PascalAntlrNodeType("PASCAL_LABEL", 40);
        public static readonly PascalAntlrNodeType LabelDeclarationPart = new PascalAntlrNodeType("PASCAL_LABEL_DECLARATION_PART", 41);
        public static readonly PascalAntlrNodeType Multiplicativeoperator = new PascalAntlrNodeType("PASCAL_MULTIPLICATIVEOPERATOR", 42);
        public static readonly PascalAntlrNodeType ParameterGroup = new PascalAntlrNodeType("PASCAL_PARAMETER_GROUP", 43);
        public static readonly PascalAntlrNodeType ParameterList = new PascalAntlrNodeType("PASCAL_PARAMETER_LIST", 44);
        public static readonly PascalAntlrNodeType Parameterwidth = new PascalAntlrNodeType("PASCAL_PARAMETERWIDTH", 45);
        public static readonly PascalAntlrNodeType PointerType = new PascalAntlrNodeType("PASCAL_POINTER_TYPE", 46);
        public static readonly PascalAntlrNodeType ProcedureAndFunctionDeclarationPart = new PascalAntlrNodeType("PASCAL_PROCEDURE_AND_FUNCTION_DECLARATION_PART", 47);
        public static readonly PascalAntlrNodeType ProcedureDeclaration = new PascalAntlrNodeType("PASCAL_PROCEDURE_DECLARATION", 48);
        public static readonly PascalAntlrNodeType ProcedureOrFunctionDeclaration = new PascalAntlrNodeType("PASCAL_PROCEDURE_OR_FUNCTION_DECLARATION", 49);
        public static readonly PascalAntlrNodeType ProcedureStatement = new PascalAntlrNodeType("PASCAL_PROCEDURE_STATEMENT", 50);
        public static readonly PascalAntlrNodeType ProcedureType = new PascalAntlrNodeType("PASCAL_PROCEDURE_TYPE", 51);
        public static readonly PascalAntlrNodeType Program = new PascalAntlrNodeType("PASCAL_PROGRAM", 52);
        public static readonly PascalAntlrNodeType ProgramHeading = new PascalAntlrNodeType("PASCAL_PROGRAM_HEADING", 53);
        public static readonly PascalAntlrNodeType RecordSection = new PascalAntlrNodeType("PASCAL_RECORD_SECTION", 54);
        public static readonly PascalAntlrNodeType RecordType = new PascalAntlrNodeType("PASCAL_RECORD_TYPE", 55);
        public static readonly PascalAntlrNodeType RecordVariableList = new PascalAntlrNodeType("PASCAL_RECORD_VARIABLE_LIST", 56);
        public static readonly PascalAntlrNodeType Relationaloperator = new PascalAntlrNodeType("PASCAL_RELATIONALOPERATOR", 57);
        public static readonly PascalAntlrNodeType RepeatStatement = new PascalAntlrNodeType("PASCAL_REPEAT_STATEMENT", 58);
        public static readonly PascalAntlrNodeType RepetetiveStatement = new PascalAntlrNodeType("PASCAL_REPETETIVE_STATEMENT", 59);
        public static readonly PascalAntlrNodeType ResultType = new PascalAntlrNodeType("PASCAL_RESULT_TYPE", 60);
        public static readonly PascalAntlrNodeType ScalarType = new PascalAntlrNodeType("PASCAL_SCALAR_TYPE", 61);
        public static readonly PascalAntlrNodeType Set = new PascalAntlrNodeType("PASCAL_SET", 62);
        public static readonly PascalAntlrNodeType SetType = new PascalAntlrNodeType("PASCAL_SET_TYPE", 63);
        public static readonly PascalAntlrNodeType Sign = new PascalAntlrNodeType("PASCAL_SIGN", 64);
        public static readonly PascalAntlrNodeType SignedFactor = new PascalAntlrNodeType("PASCAL_SIGNED_FACTOR", 65);
        public static readonly PascalAntlrNodeType SimpleExpression = new PascalAntlrNodeType("PASCAL_SIMPLE_EXPRESSION", 66);
        public static readonly PascalAntlrNodeType SimpleStatement = new PascalAntlrNodeType("PASCAL_SIMPLE_STATEMENT", 67);
        public static readonly PascalAntlrNodeType SimpleType = new PascalAntlrNodeType("PASCAL_SIMPLE_TYPE", 68);
        public static readonly PascalAntlrNodeType Statement = new PascalAntlrNodeType("PASCAL_STATEMENT", 69);
        public static readonly PascalAntlrNodeType Statements = new PascalAntlrNodeType("PASCAL_STATEMENTS", 70);
        public static readonly PascalAntlrNodeType String = new PascalAntlrNodeType("PASCAL_STRING", 71);
        public static readonly PascalAntlrNodeType Stringtype = new PascalAntlrNodeType("PASCAL_STRINGTYPE", 72);
        public static readonly PascalAntlrNodeType StructuredStatement = new PascalAntlrNodeType("PASCAL_STRUCTURED_STATEMENT", 73);
        public static readonly PascalAntlrNodeType StructuredType = new PascalAntlrNodeType("PASCAL_STRUCTURED_TYPE", 74);
        public static readonly PascalAntlrNodeType SubrangeType = new PascalAntlrNodeType("PASCAL_SUBRANGE_TYPE", 75);
        public static readonly PascalAntlrNodeType Tag = new PascalAntlrNodeType("PASCAL_TAG", 76);
        public static readonly PascalAntlrNodeType Term = new PascalAntlrNodeType("PASCAL_TERM", 77);
        public static readonly PascalAntlrNodeType Type = new PascalAntlrNodeType("PASCAL_TYPE", 78);
        public static readonly PascalAntlrNodeType TypeDefinition = new PascalAntlrNodeType("PASCAL_TYPE_DEFINITION", 79);
        public static readonly PascalAntlrNodeType TypeDefinitionPart = new PascalAntlrNodeType("PASCAL_TYPE_DEFINITION_PART", 80);
        public static readonly PascalAntlrNodeType TypeIdentifier = new PascalAntlrNodeType("PASCAL_TYPE_IDENTIFIER", 81);
        public static readonly PascalAntlrNodeType TypeList = new PascalAntlrNodeType("PASCAL_TYPE_LIST", 82);
        public static readonly PascalAntlrNodeType UnlabelledStatement = new PascalAntlrNodeType("PASCAL_UNLABELLED_STATEMENT", 83);
        public static readonly PascalAntlrNodeType UnpackedStructuredType = new PascalAntlrNodeType("PASCAL_UNPACKED_STRUCTURED_TYPE", 84);
        public static readonly PascalAntlrNodeType UnsignedConstant = new PascalAntlrNodeType("PASCAL_UNSIGNED_CONSTANT", 85);
        public static readonly PascalAntlrNodeType UnsignedInteger = new PascalAntlrNodeType("PASCAL_UNSIGNED_INTEGER", 86);
        public static readonly PascalAntlrNodeType UnsignedNumber = new PascalAntlrNodeType("PASCAL_UNSIGNED_NUMBER", 87);
        public static readonly PascalAntlrNodeType UnsignedReal = new PascalAntlrNodeType("PASCAL_UNSIGNED_REAL", 88);
        public static readonly PascalAntlrNodeType UsesUnitsPart = new PascalAntlrNodeType("PASCAL_USES_UNITS_PART", 89);
        public static readonly PascalAntlrNodeType Variable = new PascalAntlrNodeType("PASCAL_VARIABLE", 90);
        public static readonly PascalAntlrNodeType VariableDeclaration = new PascalAntlrNodeType("PASCAL_VARIABLE_DECLARATION", 91);
        public static readonly PascalAntlrNodeType VariableDeclarationPart = new PascalAntlrNodeType("PASCAL_VARIABLE_DECLARATION_PART", 92);
        public static readonly PascalAntlrNodeType Variant = new PascalAntlrNodeType("PASCAL_VARIANT", 93);
        public static readonly PascalAntlrNodeType VariantPart = new PascalAntlrNodeType("PASCAL_VARIANT_PART", 94);
        public static readonly PascalAntlrNodeType WhileStatement = new PascalAntlrNodeType("PASCAL_WHILE_STATEMENT", 95);
        public static readonly PascalAntlrNodeType WithStatement = new PascalAntlrNodeType("PASCAL_WITH_STATEMENT", 96);

        public static readonly PascalErrorNodeType Error = new PascalErrorNodeType("PASCAL_ERROR", 97);
        public static readonly PascalFileNodeType File = new PascalFileNodeType("PASCAL_FILE", 98);

    }
}