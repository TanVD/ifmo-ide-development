//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/tanvd/csc/ide/pascal-lang/Spring/src/Spring/src/grammar/pascal.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class pascalParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		AND=1, ARRAY=2, BEGIN=3, BOOLEAN=4, CASE=5, CHAR=6, CHR=7, CONST=8, DIV=9, 
		DO=10, DOWNTO=11, ELSE=12, END=13, FILE=14, FOR=15, FUNCTION=16, GOTO=17, 
		IF=18, IN=19, INTEGER=20, LABEL=21, MOD=22, NIL=23, NOT=24, OF=25, OR=26, 
		PACKED=27, PROCEDURE=28, PROGRAM=29, REAL=30, RECORD=31, REPEAT=32, SET=33, 
		THEN=34, TO=35, TYPE=36, UNTIL=37, VAR=38, WHILE=39, WITH=40, PLUS=41, 
		MINUS=42, STAR=43, SLASH=44, ASSIGN=45, COMMA=46, SEMI=47, COLON=48, EQUAL=49, 
		NOT_EQUAL=50, LT=51, LE=52, GE=53, GT=54, LPAREN=55, RPAREN=56, LBRACK=57, 
		LBRACK2=58, RBRACK=59, RBRACK2=60, POINTER=61, AT=62, DOT=63, DOTDOT=64, 
		LCURLY=65, RCURLY=66, UNIT=67, INTERFACE=68, USES=69, STRING=70, IMPLEMENTATION=71, 
		TRUE=72, FALSE=73, WS=74, COMMENT_1=75, COMMENT_2=76, IDENT=77, STRING_LITERAL=78, 
		NUM_INT=79, NUM_REAL=80;
	public const int
		RULE_program = 0, RULE_programHeading = 1, RULE_identifier = 2, RULE_block = 3, 
		RULE_usesUnitsPart = 4, RULE_labelDeclarationPart = 5, RULE_label = 6, 
		RULE_constantDefinitionPart = 7, RULE_constantDefinition = 8, RULE_constantChr = 9, 
		RULE_constant = 10, RULE_unsignedNumber = 11, RULE_unsignedInteger = 12, 
		RULE_unsignedReal = 13, RULE_sign = 14, RULE_bool = 15, RULE_string = 16, 
		RULE_typeDefinitionPart = 17, RULE_typeDefinition = 18, RULE_functionType = 19, 
		RULE_procedureType = 20, RULE_type = 21, RULE_simpleType = 22, RULE_scalarType = 23, 
		RULE_subrangeType = 24, RULE_typeIdentifier = 25, RULE_structuredType = 26, 
		RULE_unpackedStructuredType = 27, RULE_stringtype = 28, RULE_arrayType = 29, 
		RULE_typeList = 30, RULE_indexType = 31, RULE_componentType = 32, RULE_recordType = 33, 
		RULE_fieldList = 34, RULE_fixedPart = 35, RULE_recordSection = 36, RULE_variantPart = 37, 
		RULE_tag = 38, RULE_variant = 39, RULE_setType = 40, RULE_baseType = 41, 
		RULE_fileType = 42, RULE_pointerType = 43, RULE_variableDeclarationPart = 44, 
		RULE_variableDeclaration = 45, RULE_procedureAndFunctionDeclarationPart = 46, 
		RULE_procedureOrFunctionDeclaration = 47, RULE_procedureDeclaration = 48, 
		RULE_formalParameterList = 49, RULE_formalParameterSection = 50, RULE_parameterGroup = 51, 
		RULE_identifierList = 52, RULE_constList = 53, RULE_functionDeclaration = 54, 
		RULE_resultType = 55, RULE_statement = 56, RULE_unlabelledStatement = 57, 
		RULE_simpleStatement = 58, RULE_assignmentStatement = 59, RULE_variable = 60, 
		RULE_expression = 61, RULE_relationaloperator = 62, RULE_simpleExpression = 63, 
		RULE_additiveoperator = 64, RULE_term = 65, RULE_multiplicativeoperator = 66, 
		RULE_signedFactor = 67, RULE_factor = 68, RULE_unsignedConstant = 69, 
		RULE_functionDesignator = 70, RULE_parameterList = 71, RULE_set = 72, 
		RULE_elementList = 73, RULE_element = 74, RULE_procedureStatement = 75, 
		RULE_actualParameter = 76, RULE_parameterwidth = 77, RULE_gotoStatement = 78, 
		RULE_emptyStatement = 79, RULE_empty = 80, RULE_structuredStatement = 81, 
		RULE_compoundStatement = 82, RULE_statements = 83, RULE_conditionalStatement = 84, 
		RULE_ifStatement = 85, RULE_caseStatement = 86, RULE_caseListElement = 87, 
		RULE_repetetiveStatement = 88, RULE_whileStatement = 89, RULE_repeatStatement = 90, 
		RULE_forStatement = 91, RULE_forList = 92, RULE_initialValue = 93, RULE_finalValue = 94, 
		RULE_withStatement = 95, RULE_recordVariableList = 96;
	public static readonly string[] ruleNames = {
		"program", "programHeading", "identifier", "block", "usesUnitsPart", "labelDeclarationPart", 
		"label", "constantDefinitionPart", "constantDefinition", "constantChr", 
		"constant", "unsignedNumber", "unsignedInteger", "unsignedReal", "sign", 
		"bool", "string", "typeDefinitionPart", "typeDefinition", "functionType", 
		"procedureType", "type", "simpleType", "scalarType", "subrangeType", "typeIdentifier", 
		"structuredType", "unpackedStructuredType", "stringtype", "arrayType", 
		"typeList", "indexType", "componentType", "recordType", "fieldList", "fixedPart", 
		"recordSection", "variantPart", "tag", "variant", "setType", "baseType", 
		"fileType", "pointerType", "variableDeclarationPart", "variableDeclaration", 
		"procedureAndFunctionDeclarationPart", "procedureOrFunctionDeclaration", 
		"procedureDeclaration", "formalParameterList", "formalParameterSection", 
		"parameterGroup", "identifierList", "constList", "functionDeclaration", 
		"resultType", "statement", "unlabelledStatement", "simpleStatement", "assignmentStatement", 
		"variable", "expression", "relationaloperator", "simpleExpression", "additiveoperator", 
		"term", "multiplicativeoperator", "signedFactor", "factor", "unsignedConstant", 
		"functionDesignator", "parameterList", "set", "elementList", "element", 
		"procedureStatement", "actualParameter", "parameterwidth", "gotoStatement", 
		"emptyStatement", "empty", "structuredStatement", "compoundStatement", 
		"statements", "conditionalStatement", "ifStatement", "caseStatement", 
		"caseListElement", "repetetiveStatement", "whileStatement", "repeatStatement", 
		"forStatement", "forList", "initialValue", "finalValue", "withStatement", 
		"recordVariableList"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "'+'", "'-'", "'*'", "'/'", "':='", "','", 
		"';'", "':'", "'='", "'<>'", "'<'", "'<='", "'>='", "'>'", "'('", "')'", 
		"'['", "'(.'", "']'", "'.)'", "'^'", "'@'", "'.'", "'..'", "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "AND", "ARRAY", "BEGIN", "BOOLEAN", "CASE", "CHAR", "CHR", "CONST", 
		"DIV", "DO", "DOWNTO", "ELSE", "END", "FILE", "FOR", "FUNCTION", "GOTO", 
		"IF", "IN", "INTEGER", "LABEL", "MOD", "NIL", "NOT", "OF", "OR", "PACKED", 
		"PROCEDURE", "PROGRAM", "REAL", "RECORD", "REPEAT", "SET", "THEN", "TO", 
		"TYPE", "UNTIL", "VAR", "WHILE", "WITH", "PLUS", "MINUS", "STAR", "SLASH", 
		"ASSIGN", "COMMA", "SEMI", "COLON", "EQUAL", "NOT_EQUAL", "LT", "LE", 
		"GE", "GT", "LPAREN", "RPAREN", "LBRACK", "LBRACK2", "RBRACK", "RBRACK2", 
		"POINTER", "AT", "DOT", "DOTDOT", "LCURLY", "RCURLY", "UNIT", "INTERFACE", 
		"USES", "STRING", "IMPLEMENTATION", "TRUE", "FALSE", "WS", "COMMENT_1", 
		"COMMENT_2", "IDENT", "STRING_LITERAL", "NUM_INT", "NUM_REAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "pascal.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static pascalParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public pascalParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public pascalParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public ProgramHeadingContext programHeading() {
			return GetRuleContext<ProgramHeadingContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(pascalParser.DOT, 0); }
		public ITerminalNode INTERFACE() { return GetToken(pascalParser.INTERFACE, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194; programHeading();
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTERFACE) {
				{
				State = 195; Match(INTERFACE);
				}
			}

			State = 198; block();
			State = 199; Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramHeadingContext : ParserRuleContext {
		public ITerminalNode PROGRAM() { return GetToken(pascalParser.PROGRAM, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(pascalParser.SEMI, 0); }
		public ITerminalNode LPAREN() { return GetToken(pascalParser.LPAREN, 0); }
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(pascalParser.RPAREN, 0); }
		public ITerminalNode UNIT() { return GetToken(pascalParser.UNIT, 0); }
		public ProgramHeadingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programHeading; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterProgramHeading(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitProgramHeading(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramHeading(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramHeadingContext programHeading() {
		ProgramHeadingContext _localctx = new ProgramHeadingContext(Context, State);
		EnterRule(_localctx, 2, RULE_programHeading);
		int _la;
		try {
			State = 215;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROGRAM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 201; Match(PROGRAM);
				State = 202; identifier();
				State = 207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 203; Match(LPAREN);
					State = 204; identifierList();
					State = 205; Match(RPAREN);
					}
				}

				State = 209; Match(SEMI);
				}
				break;
			case UNIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 211; Match(UNIT);
				State = 212; identifier();
				State = 213; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(pascalParser.IDENT, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 4, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public LabelDeclarationPartContext[] labelDeclarationPart() {
			return GetRuleContexts<LabelDeclarationPartContext>();
		}
		public LabelDeclarationPartContext labelDeclarationPart(int i) {
			return GetRuleContext<LabelDeclarationPartContext>(i);
		}
		public ConstantDefinitionPartContext[] constantDefinitionPart() {
			return GetRuleContexts<ConstantDefinitionPartContext>();
		}
		public ConstantDefinitionPartContext constantDefinitionPart(int i) {
			return GetRuleContext<ConstantDefinitionPartContext>(i);
		}
		public TypeDefinitionPartContext[] typeDefinitionPart() {
			return GetRuleContexts<TypeDefinitionPartContext>();
		}
		public TypeDefinitionPartContext typeDefinitionPart(int i) {
			return GetRuleContext<TypeDefinitionPartContext>(i);
		}
		public VariableDeclarationPartContext[] variableDeclarationPart() {
			return GetRuleContexts<VariableDeclarationPartContext>();
		}
		public VariableDeclarationPartContext variableDeclarationPart(int i) {
			return GetRuleContext<VariableDeclarationPartContext>(i);
		}
		public ProcedureAndFunctionDeclarationPartContext[] procedureAndFunctionDeclarationPart() {
			return GetRuleContexts<ProcedureAndFunctionDeclarationPartContext>();
		}
		public ProcedureAndFunctionDeclarationPartContext procedureAndFunctionDeclarationPart(int i) {
			return GetRuleContext<ProcedureAndFunctionDeclarationPartContext>(i);
		}
		public UsesUnitsPartContext[] usesUnitsPart() {
			return GetRuleContexts<UsesUnitsPartContext>();
		}
		public UsesUnitsPartContext usesUnitsPart(int i) {
			return GetRuleContext<UsesUnitsPartContext>(i);
		}
		public ITerminalNode[] IMPLEMENTATION() { return GetTokens(pascalParser.IMPLEMENTATION); }
		public ITerminalNode IMPLEMENTATION(int i) {
			return GetToken(pascalParser.IMPLEMENTATION, i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 8)) & ~0x3f) == 0 && ((1L << (_la - 8)) & ((1L << (CONST - 8)) | (1L << (FUNCTION - 8)) | (1L << (LABEL - 8)) | (1L << (PROCEDURE - 8)) | (1L << (TYPE - 8)) | (1L << (VAR - 8)) | (1L << (USES - 8)) | (1L << (IMPLEMENTATION - 8)))) != 0)) {
				{
				State = 226;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LABEL:
					{
					State = 219; labelDeclarationPart();
					}
					break;
				case CONST:
					{
					State = 220; constantDefinitionPart();
					}
					break;
				case TYPE:
					{
					State = 221; typeDefinitionPart();
					}
					break;
				case VAR:
					{
					State = 222; variableDeclarationPart();
					}
					break;
				case FUNCTION:
				case PROCEDURE:
					{
					State = 223; procedureAndFunctionDeclarationPart();
					}
					break;
				case USES:
					{
					State = 224; usesUnitsPart();
					}
					break;
				case IMPLEMENTATION:
					{
					State = 225; Match(IMPLEMENTATION);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 230;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 231; compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsesUnitsPartContext : ParserRuleContext {
		public ITerminalNode USES() { return GetToken(pascalParser.USES, 0); }
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(pascalParser.SEMI, 0); }
		public UsesUnitsPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usesUnitsPart; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterUsesUnitsPart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitUsesUnitsPart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsesUnitsPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsesUnitsPartContext usesUnitsPart() {
		UsesUnitsPartContext _localctx = new UsesUnitsPartContext(Context, State);
		EnterRule(_localctx, 8, RULE_usesUnitsPart);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233; Match(USES);
			State = 234; identifierList();
			State = 235; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelDeclarationPartContext : ParserRuleContext {
		public ITerminalNode LABEL() { return GetToken(pascalParser.LABEL, 0); }
		public LabelContext[] label() {
			return GetRuleContexts<LabelContext>();
		}
		public LabelContext label(int i) {
			return GetRuleContext<LabelContext>(i);
		}
		public ITerminalNode SEMI() { return GetToken(pascalParser.SEMI, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(pascalParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(pascalParser.COMMA, i);
		}
		public LabelDeclarationPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelDeclarationPart; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterLabelDeclarationPart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitLabelDeclarationPart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelDeclarationPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelDeclarationPartContext labelDeclarationPart() {
		LabelDeclarationPartContext _localctx = new LabelDeclarationPartContext(Context, State);
		EnterRule(_localctx, 10, RULE_labelDeclarationPart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237; Match(LABEL);
			State = 238; label();
			State = 243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 239; Match(COMMA);
				State = 240; label();
				}
				}
				State = 245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 246; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		public UnsignedIntegerContext unsignedInteger() {
			return GetRuleContext<UnsignedIntegerContext>(0);
		}
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 12, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248; unsignedInteger();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDefinitionPartContext : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(pascalParser.CONST, 0); }
		public ConstantDefinitionContext[] constantDefinition() {
			return GetRuleContexts<ConstantDefinitionContext>();
		}
		public ConstantDefinitionContext constantDefinition(int i) {
			return GetRuleContext<ConstantDefinitionContext>(i);
		}
		public ITerminalNode[] SEMI() { return GetTokens(pascalParser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(pascalParser.SEMI, i);
		}
		public ConstantDefinitionPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDefinitionPart; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterConstantDefinitionPart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitConstantDefinitionPart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantDefinitionPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDefinitionPartContext constantDefinitionPart() {
		ConstantDefinitionPartContext _localctx = new ConstantDefinitionPartContext(Context, State);
		EnterRule(_localctx, 14, RULE_constantDefinitionPart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250; Match(CONST);
			State = 254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 251; constantDefinition();
				State = 252; Match(SEMI);
				}
				}
				State = 256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDefinitionContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode EQUAL() { return GetToken(pascalParser.EQUAL, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterConstantDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitConstantDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDefinitionContext constantDefinition() {
		ConstantDefinitionContext _localctx = new ConstantDefinitionContext(Context, State);
		EnterRule(_localctx, 16, RULE_constantDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258; identifier();
			State = 259; Match(EQUAL);
			State = 260; constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantChrContext : ParserRuleContext {
		public ITerminalNode CHR() { return GetToken(pascalParser.CHR, 0); }
		public ITerminalNode LPAREN() { return GetToken(pascalParser.LPAREN, 0); }
		public UnsignedIntegerContext unsignedInteger() {
			return GetRuleContext<UnsignedIntegerContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(pascalParser.RPAREN, 0); }
		public ConstantChrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantChr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterConstantChr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitConstantChr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantChr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantChrContext constantChr() {
		ConstantChrContext _localctx = new ConstantChrContext(Context, State);
		EnterRule(_localctx, 18, RULE_constantChr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262; Match(CHR);
			State = 263; Match(LPAREN);
			State = 264; unsignedInteger();
			State = 265; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public UnsignedNumberContext unsignedNumber() {
			return GetRuleContext<UnsignedNumberContext>(0);
		}
		public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ConstantChrContext constantChr() {
			return GetRuleContext<ConstantChrContext>(0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 20, RULE_constant);
		try {
			State = 277;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 267; unsignedNumber();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 268; sign();
				State = 269; unsignedNumber();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 271; identifier();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 272; sign();
				State = 273; identifier();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 275; @string();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 276; constantChr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedNumberContext : ParserRuleContext {
		public UnsignedIntegerContext unsignedInteger() {
			return GetRuleContext<UnsignedIntegerContext>(0);
		}
		public UnsignedRealContext unsignedReal() {
			return GetRuleContext<UnsignedRealContext>(0);
		}
		public UnsignedNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterUnsignedNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitUnsignedNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedNumberContext unsignedNumber() {
		UnsignedNumberContext _localctx = new UnsignedNumberContext(Context, State);
		EnterRule(_localctx, 22, RULE_unsignedNumber);
		try {
			State = 281;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUM_INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 279; unsignedInteger();
				}
				break;
			case NUM_REAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 280; unsignedReal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedIntegerContext : ParserRuleContext {
		public ITerminalNode NUM_INT() { return GetToken(pascalParser.NUM_INT, 0); }
		public UnsignedIntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedInteger; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterUnsignedInteger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitUnsignedInteger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedIntegerContext unsignedInteger() {
		UnsignedIntegerContext _localctx = new UnsignedIntegerContext(Context, State);
		EnterRule(_localctx, 24, RULE_unsignedInteger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283; Match(NUM_INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedRealContext : ParserRuleContext {
		public ITerminalNode NUM_REAL() { return GetToken(pascalParser.NUM_REAL, 0); }
		public UnsignedRealContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedReal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterUnsignedReal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitUnsignedReal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedReal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedRealContext unsignedReal() {
		UnsignedRealContext _localctx = new UnsignedRealContext(Context, State);
		EnterRule(_localctx, 26, RULE_unsignedReal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285; Match(NUM_REAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(pascalParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(pascalParser.MINUS, 0); }
		public SignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterSign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitSign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignContext sign() {
		SignContext _localctx = new SignContext(Context, State);
		EnterRule(_localctx, 28, RULE_sign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(pascalParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(pascalParser.FALSE, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 30, RULE_bool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(pascalParser.STRING_LITERAL, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 32, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291; Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefinitionPartContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(pascalParser.TYPE, 0); }
		public TypeDefinitionContext[] typeDefinition() {
			return GetRuleContexts<TypeDefinitionContext>();
		}
		public TypeDefinitionContext typeDefinition(int i) {
			return GetRuleContext<TypeDefinitionContext>(i);
		}
		public ITerminalNode[] SEMI() { return GetTokens(pascalParser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(pascalParser.SEMI, i);
		}
		public TypeDefinitionPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDefinitionPart; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterTypeDefinitionPart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitTypeDefinitionPart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDefinitionPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefinitionPartContext typeDefinitionPart() {
		TypeDefinitionPartContext _localctx = new TypeDefinitionPartContext(Context, State);
		EnterRule(_localctx, 34, RULE_typeDefinitionPart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293; Match(TYPE);
			State = 297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 294; typeDefinition();
				State = 295; Match(SEMI);
				}
				}
				State = 299;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefinitionContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode EQUAL() { return GetToken(pascalParser.EQUAL, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		public ProcedureTypeContext procedureType() {
			return GetRuleContext<ProcedureTypeContext>(0);
		}
		public TypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterTypeDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitTypeDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefinitionContext typeDefinition() {
		TypeDefinitionContext _localctx = new TypeDefinitionContext(Context, State);
		EnterRule(_localctx, 36, RULE_typeDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301; identifier();
			State = 302; Match(EQUAL);
			State = 306;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ARRAY:
			case BOOLEAN:
			case CHAR:
			case CHR:
			case FILE:
			case INTEGER:
			case PACKED:
			case REAL:
			case RECORD:
			case SET:
			case PLUS:
			case MINUS:
			case LPAREN:
			case POINTER:
			case STRING:
			case IDENT:
			case STRING_LITERAL:
			case NUM_INT:
			case NUM_REAL:
				{
				State = 303; type();
				}
				break;
			case FUNCTION:
				{
				State = 304; functionType();
				}
				break;
			case PROCEDURE:
				{
				State = 305; procedureType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeContext : ParserRuleContext {
		public ITerminalNode FUNCTION() { return GetToken(pascalParser.FUNCTION, 0); }
		public ITerminalNode COLON() { return GetToken(pascalParser.COLON, 0); }
		public ResultTypeContext resultType() {
			return GetRuleContext<ResultTypeContext>(0);
		}
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FunctionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterFunctionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitFunctionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeContext functionType() {
		FunctionTypeContext _localctx = new FunctionTypeContext(Context, State);
		EnterRule(_localctx, 38, RULE_functionType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308; Match(FUNCTION);
			State = 310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 309; formalParameterList();
				}
			}

			State = 312; Match(COLON);
			State = 313; resultType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureTypeContext : ParserRuleContext {
		public ITerminalNode PROCEDURE() { return GetToken(pascalParser.PROCEDURE, 0); }
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ProcedureTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterProcedureType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitProcedureType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureTypeContext procedureType() {
		ProcedureTypeContext _localctx = new ProcedureTypeContext(Context, State);
		EnterRule(_localctx, 40, RULE_procedureType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315; Match(PROCEDURE);
			State = 317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 316; formalParameterList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public StructuredTypeContext structuredType() {
			return GetRuleContext<StructuredTypeContext>(0);
		}
		public PointerTypeContext pointerType() {
			return GetRuleContext<PointerTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 42, RULE_type);
		try {
			State = 322;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case CHAR:
			case CHR:
			case INTEGER:
			case REAL:
			case PLUS:
			case MINUS:
			case LPAREN:
			case STRING:
			case IDENT:
			case STRING_LITERAL:
			case NUM_INT:
			case NUM_REAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 319; simpleType();
				}
				break;
			case ARRAY:
			case FILE:
			case PACKED:
			case RECORD:
			case SET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 320; structuredType();
				}
				break;
			case POINTER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 321; pointerType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		public ScalarTypeContext scalarType() {
			return GetRuleContext<ScalarTypeContext>(0);
		}
		public SubrangeTypeContext subrangeType() {
			return GetRuleContext<SubrangeTypeContext>(0);
		}
		public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		public StringtypeContext stringtype() {
			return GetRuleContext<StringtypeContext>(0);
		}
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterSimpleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitSimpleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(Context, State);
		EnterRule(_localctx, 44, RULE_simpleType);
		try {
			State = 328;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 324; scalarType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 325; subrangeType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 326; typeIdentifier();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 327; stringtype();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarTypeContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(pascalParser.LPAREN, 0); }
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(pascalParser.RPAREN, 0); }
		public ScalarTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalarType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterScalarType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitScalarType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalarType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScalarTypeContext scalarType() {
		ScalarTypeContext _localctx = new ScalarTypeContext(Context, State);
		EnterRule(_localctx, 46, RULE_scalarType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330; Match(LPAREN);
			State = 331; identifierList();
			State = 332; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubrangeTypeContext : ParserRuleContext {
		public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		public ITerminalNode DOTDOT() { return GetToken(pascalParser.DOTDOT, 0); }
		public SubrangeTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subrangeType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterSubrangeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitSubrangeType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubrangeType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubrangeTypeContext subrangeType() {
		SubrangeTypeContext _localctx = new SubrangeTypeContext(Context, State);
		EnterRule(_localctx, 48, RULE_subrangeType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334; constant();
			State = 335; Match(DOTDOT);
			State = 336; constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeIdentifierContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode CHAR() { return GetToken(pascalParser.CHAR, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(pascalParser.BOOLEAN, 0); }
		public ITerminalNode INTEGER() { return GetToken(pascalParser.INTEGER, 0); }
		public ITerminalNode REAL() { return GetToken(pascalParser.REAL, 0); }
		public ITerminalNode STRING() { return GetToken(pascalParser.STRING, 0); }
		public TypeIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterTypeIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitTypeIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeIdentifierContext typeIdentifier() {
		TypeIdentifierContext _localctx = new TypeIdentifierContext(Context, State);
		EnterRule(_localctx, 50, RULE_typeIdentifier);
		int _la;
		try {
			State = 340;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 338; identifier();
				}
				break;
			case BOOLEAN:
			case CHAR:
			case INTEGER:
			case REAL:
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 339;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHAR) | (1L << INTEGER) | (1L << REAL))) != 0) || _la==STRING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructuredTypeContext : ParserRuleContext {
		public ITerminalNode PACKED() { return GetToken(pascalParser.PACKED, 0); }
		public UnpackedStructuredTypeContext unpackedStructuredType() {
			return GetRuleContext<UnpackedStructuredTypeContext>(0);
		}
		public StructuredTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structuredType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterStructuredType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitStructuredType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructuredType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructuredTypeContext structuredType() {
		StructuredTypeContext _localctx = new StructuredTypeContext(Context, State);
		EnterRule(_localctx, 52, RULE_structuredType);
		try {
			State = 345;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PACKED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 342; Match(PACKED);
				State = 343; unpackedStructuredType();
				}
				break;
			case ARRAY:
			case FILE:
			case RECORD:
			case SET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 344; unpackedStructuredType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnpackedStructuredTypeContext : ParserRuleContext {
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public RecordTypeContext recordType() {
			return GetRuleContext<RecordTypeContext>(0);
		}
		public SetTypeContext setType() {
			return GetRuleContext<SetTypeContext>(0);
		}
		public FileTypeContext fileType() {
			return GetRuleContext<FileTypeContext>(0);
		}
		public UnpackedStructuredTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpackedStructuredType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterUnpackedStructuredType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitUnpackedStructuredType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnpackedStructuredType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnpackedStructuredTypeContext unpackedStructuredType() {
		UnpackedStructuredTypeContext _localctx = new UnpackedStructuredTypeContext(Context, State);
		EnterRule(_localctx, 54, RULE_unpackedStructuredType);
		try {
			State = 351;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ARRAY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 347; arrayType();
				}
				break;
			case RECORD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 348; recordType();
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 3);
				{
				State = 349; setType();
				}
				break;
			case FILE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 350; fileType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringtypeContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(pascalParser.STRING, 0); }
		public ITerminalNode LBRACK() { return GetToken(pascalParser.LBRACK, 0); }
		public ITerminalNode RBRACK() { return GetToken(pascalParser.RBRACK, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public UnsignedNumberContext unsignedNumber() {
			return GetRuleContext<UnsignedNumberContext>(0);
		}
		public StringtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringtype; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterStringtype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitStringtype(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringtype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringtypeContext stringtype() {
		StringtypeContext _localctx = new StringtypeContext(Context, State);
		EnterRule(_localctx, 56, RULE_stringtype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353; Match(STRING);
			State = 354; Match(LBRACK);
			State = 357;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENT:
				{
				State = 355; identifier();
				}
				break;
			case NUM_INT:
			case NUM_REAL:
				{
				State = 356; unsignedNumber();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 359; Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		public ITerminalNode ARRAY() { return GetToken(pascalParser.ARRAY, 0); }
		public ITerminalNode LBRACK() { return GetToken(pascalParser.LBRACK, 0); }
		public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		public ITerminalNode RBRACK() { return GetToken(pascalParser.RBRACK, 0); }
		public ITerminalNode OF() { return GetToken(pascalParser.OF, 0); }
		public ComponentTypeContext componentType() {
			return GetRuleContext<ComponentTypeContext>(0);
		}
		public ITerminalNode LBRACK2() { return GetToken(pascalParser.LBRACK2, 0); }
		public ITerminalNode RBRACK2() { return GetToken(pascalParser.RBRACK2, 0); }
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 58, RULE_arrayType);
		try {
			State = 375;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 361; Match(ARRAY);
				State = 362; Match(LBRACK);
				State = 363; typeList();
				State = 364; Match(RBRACK);
				State = 365; Match(OF);
				State = 366; componentType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 368; Match(ARRAY);
				State = 369; Match(LBRACK2);
				State = 370; typeList();
				State = 371; Match(RBRACK2);
				State = 372; Match(OF);
				State = 373; componentType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeListContext : ParserRuleContext {
		public IndexTypeContext[] indexType() {
			return GetRuleContexts<IndexTypeContext>();
		}
		public IndexTypeContext indexType(int i) {
			return GetRuleContext<IndexTypeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(pascalParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(pascalParser.COMMA, i);
		}
		public TypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterTypeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitTypeList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeListContext typeList() {
		TypeListContext _localctx = new TypeListContext(Context, State);
		EnterRule(_localctx, 60, RULE_typeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377; indexType();
			State = 382;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 378; Match(COMMA);
				State = 379; indexType();
				}
				}
				State = 384;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexTypeContext : ParserRuleContext {
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public IndexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterIndexType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitIndexType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexTypeContext indexType() {
		IndexTypeContext _localctx = new IndexTypeContext(Context, State);
		EnterRule(_localctx, 62, RULE_indexType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385; simpleType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentTypeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ComponentTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterComponentType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitComponentType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponentType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComponentTypeContext componentType() {
		ComponentTypeContext _localctx = new ComponentTypeContext(Context, State);
		EnterRule(_localctx, 64, RULE_componentType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordTypeContext : ParserRuleContext {
		public ITerminalNode RECORD() { return GetToken(pascalParser.RECORD, 0); }
		public ITerminalNode END() { return GetToken(pascalParser.END, 0); }
		public FieldListContext fieldList() {
			return GetRuleContext<FieldListContext>(0);
		}
		public RecordTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterRecordType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitRecordType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordTypeContext recordType() {
		RecordTypeContext _localctx = new RecordTypeContext(Context, State);
		EnterRule(_localctx, 66, RULE_recordType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389; Match(RECORD);
			State = 391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASE || _la==IDENT) {
				{
				State = 390; fieldList();
				}
			}

			State = 393; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldListContext : ParserRuleContext {
		public FixedPartContext fixedPart() {
			return GetRuleContext<FixedPartContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(pascalParser.SEMI, 0); }
		public VariantPartContext variantPart() {
			return GetRuleContext<VariantPartContext>(0);
		}
		public FieldListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterFieldList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitFieldList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldListContext fieldList() {
		FieldListContext _localctx = new FieldListContext(Context, State);
		EnterRule(_localctx, 68, RULE_fieldList);
		int _la;
		try {
			State = 401;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 395; fixedPart();
				State = 398;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMI) {
					{
					State = 396; Match(SEMI);
					State = 397; variantPart();
					}
				}

				}
				break;
			case CASE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 400; variantPart();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FixedPartContext : ParserRuleContext {
		public RecordSectionContext[] recordSection() {
			return GetRuleContexts<RecordSectionContext>();
		}
		public RecordSectionContext recordSection(int i) {
			return GetRuleContext<RecordSectionContext>(i);
		}
		public ITerminalNode[] SEMI() { return GetTokens(pascalParser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(pascalParser.SEMI, i);
		}
		public FixedPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixedPart; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterFixedPart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitFixedPart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixedPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FixedPartContext fixedPart() {
		FixedPartContext _localctx = new FixedPartContext(Context, State);
		EnterRule(_localctx, 70, RULE_fixedPart);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 403; recordSection();
			State = 408;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 404; Match(SEMI);
					State = 405; recordSection();
					}
					} 
				}
				State = 410;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordSectionContext : ParserRuleContext {
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(pascalParser.COLON, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public RecordSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordSection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterRecordSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitRecordSection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordSectionContext recordSection() {
		RecordSectionContext _localctx = new RecordSectionContext(Context, State);
		EnterRule(_localctx, 72, RULE_recordSection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411; identifierList();
			State = 412; Match(COLON);
			State = 413; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariantPartContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(pascalParser.CASE, 0); }
		public TagContext tag() {
			return GetRuleContext<TagContext>(0);
		}
		public ITerminalNode OF() { return GetToken(pascalParser.OF, 0); }
		public VariantContext[] variant() {
			return GetRuleContexts<VariantContext>();
		}
		public VariantContext variant(int i) {
			return GetRuleContext<VariantContext>(i);
		}
		public ITerminalNode[] SEMI() { return GetTokens(pascalParser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(pascalParser.SEMI, i);
		}
		public VariantPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variantPart; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterVariantPart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitVariantPart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariantPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariantPartContext variantPart() {
		VariantPartContext _localctx = new VariantPartContext(Context, State);
		EnterRule(_localctx, 74, RULE_variantPart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415; Match(CASE);
			State = 416; tag();
			State = 417; Match(OF);
			State = 418; variant();
			State = 423;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMI) {
				{
				{
				State = 419; Match(SEMI);
				State = 420; variant();
				}
				}
				State = 425;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(pascalParser.COLON, 0); }
		public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		public TagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitTag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagContext tag() {
		TagContext _localctx = new TagContext(Context, State);
		EnterRule(_localctx, 76, RULE_tag);
		try {
			State = 431;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 426; identifier();
				State = 427; Match(COLON);
				State = 428; typeIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 430; typeIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariantContext : ParserRuleContext {
		public ConstListContext constList() {
			return GetRuleContext<ConstListContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(pascalParser.COLON, 0); }
		public ITerminalNode LPAREN() { return GetToken(pascalParser.LPAREN, 0); }
		public FieldListContext fieldList() {
			return GetRuleContext<FieldListContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(pascalParser.RPAREN, 0); }
		public VariantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterVariant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitVariant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariantContext variant() {
		VariantContext _localctx = new VariantContext(Context, State);
		EnterRule(_localctx, 78, RULE_variant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433; constList();
			State = 434; Match(COLON);
			State = 435; Match(LPAREN);
			State = 436; fieldList();
			State = 437; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetTypeContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(pascalParser.SET, 0); }
		public ITerminalNode OF() { return GetToken(pascalParser.OF, 0); }
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public SetTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterSetType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitSetType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetTypeContext setType() {
		SetTypeContext _localctx = new SetTypeContext(Context, State);
		EnterRule(_localctx, 80, RULE_setType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439; Match(SET);
			State = 440; Match(OF);
			State = 441; baseType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeContext : ParserRuleContext {
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public BaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterBaseType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitBaseType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeContext baseType() {
		BaseTypeContext _localctx = new BaseTypeContext(Context, State);
		EnterRule(_localctx, 82, RULE_baseType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 443; simpleType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileTypeContext : ParserRuleContext {
		public ITerminalNode FILE() { return GetToken(pascalParser.FILE, 0); }
		public ITerminalNode OF() { return GetToken(pascalParser.OF, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FileTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterFileType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitFileType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileTypeContext fileType() {
		FileTypeContext _localctx = new FileTypeContext(Context, State);
		EnterRule(_localctx, 84, RULE_fileType);
		try {
			State = 449;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 445; Match(FILE);
				State = 446; Match(OF);
				State = 447; type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 448; Match(FILE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerTypeContext : ParserRuleContext {
		public ITerminalNode POINTER() { return GetToken(pascalParser.POINTER, 0); }
		public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		public PointerTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterPointerType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitPointerType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointerType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PointerTypeContext pointerType() {
		PointerTypeContext _localctx = new PointerTypeContext(Context, State);
		EnterRule(_localctx, 86, RULE_pointerType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451; Match(POINTER);
			State = 452; typeIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationPartContext : ParserRuleContext {
		public ITerminalNode VAR() { return GetToken(pascalParser.VAR, 0); }
		public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		public ITerminalNode[] SEMI() { return GetTokens(pascalParser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(pascalParser.SEMI, i);
		}
		public VariableDeclarationPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationPart; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationPart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationPart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationPartContext variableDeclarationPart() {
		VariableDeclarationPartContext _localctx = new VariableDeclarationPartContext(Context, State);
		EnterRule(_localctx, 88, RULE_variableDeclarationPart);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 454; Match(VAR);
			State = 455; variableDeclaration();
			State = 460;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 456; Match(SEMI);
					State = 457; variableDeclaration();
					}
					} 
				}
				State = 462;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			State = 463; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(pascalParser.COLON, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 90, RULE_variableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465; identifierList();
			State = 466; Match(COLON);
			State = 467; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureAndFunctionDeclarationPartContext : ParserRuleContext {
		public ProcedureOrFunctionDeclarationContext procedureOrFunctionDeclaration() {
			return GetRuleContext<ProcedureOrFunctionDeclarationContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(pascalParser.SEMI, 0); }
		public ProcedureAndFunctionDeclarationPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureAndFunctionDeclarationPart; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterProcedureAndFunctionDeclarationPart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitProcedureAndFunctionDeclarationPart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureAndFunctionDeclarationPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureAndFunctionDeclarationPartContext procedureAndFunctionDeclarationPart() {
		ProcedureAndFunctionDeclarationPartContext _localctx = new ProcedureAndFunctionDeclarationPartContext(Context, State);
		EnterRule(_localctx, 92, RULE_procedureAndFunctionDeclarationPart);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 469; procedureOrFunctionDeclaration();
			State = 470; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureOrFunctionDeclarationContext : ParserRuleContext {
		public ProcedureDeclarationContext procedureDeclaration() {
			return GetRuleContext<ProcedureDeclarationContext>(0);
		}
		public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public ProcedureOrFunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureOrFunctionDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterProcedureOrFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitProcedureOrFunctionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureOrFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureOrFunctionDeclarationContext procedureOrFunctionDeclaration() {
		ProcedureOrFunctionDeclarationContext _localctx = new ProcedureOrFunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 94, RULE_procedureOrFunctionDeclaration);
		try {
			State = 474;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROCEDURE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 472; procedureDeclaration();
				}
				break;
			case FUNCTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 473; functionDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureDeclarationContext : ParserRuleContext {
		public ITerminalNode PROCEDURE() { return GetToken(pascalParser.PROCEDURE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(pascalParser.SEMI, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ProcedureDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterProcedureDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitProcedureDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureDeclarationContext procedureDeclaration() {
		ProcedureDeclarationContext _localctx = new ProcedureDeclarationContext(Context, State);
		EnterRule(_localctx, 96, RULE_procedureDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 476; Match(PROCEDURE);
			State = 477; identifier();
			State = 479;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 478; formalParameterList();
				}
			}

			State = 481; Match(SEMI);
			State = 482; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(pascalParser.LPAREN, 0); }
		public FormalParameterSectionContext[] formalParameterSection() {
			return GetRuleContexts<FormalParameterSectionContext>();
		}
		public FormalParameterSectionContext formalParameterSection(int i) {
			return GetRuleContext<FormalParameterSectionContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(pascalParser.RPAREN, 0); }
		public ITerminalNode[] SEMI() { return GetTokens(pascalParser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(pascalParser.SEMI, i);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 98, RULE_formalParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 484; Match(LPAREN);
			State = 485; formalParameterSection();
			State = 490;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMI) {
				{
				{
				State = 486; Match(SEMI);
				State = 487; formalParameterSection();
				}
				}
				State = 492;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 493; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterSectionContext : ParserRuleContext {
		public ParameterGroupContext parameterGroup() {
			return GetRuleContext<ParameterGroupContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(pascalParser.VAR, 0); }
		public ITerminalNode FUNCTION() { return GetToken(pascalParser.FUNCTION, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(pascalParser.PROCEDURE, 0); }
		public FormalParameterSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterSection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterFormalParameterSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitFormalParameterSection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterSectionContext formalParameterSection() {
		FormalParameterSectionContext _localctx = new FormalParameterSectionContext(Context, State);
		EnterRule(_localctx, 100, RULE_formalParameterSection);
		try {
			State = 502;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 495; parameterGroup();
				}
				break;
			case VAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 496; Match(VAR);
				State = 497; parameterGroup();
				}
				break;
			case FUNCTION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 498; Match(FUNCTION);
				State = 499; parameterGroup();
				}
				break;
			case PROCEDURE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 500; Match(PROCEDURE);
				State = 501; parameterGroup();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterGroupContext : ParserRuleContext {
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(pascalParser.COLON, 0); }
		public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		public ParameterGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterParameterGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitParameterGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterGroupContext parameterGroup() {
		ParameterGroupContext _localctx = new ParameterGroupContext(Context, State);
		EnterRule(_localctx, 102, RULE_parameterGroup);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 504; identifierList();
			State = 505; Match(COLON);
			State = 506; typeIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(pascalParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(pascalParser.COMMA, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 104, RULE_identifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 508; identifier();
			State = 513;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 509; Match(COMMA);
				State = 510; identifier();
				}
				}
				State = 515;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstListContext : ParserRuleContext {
		public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(pascalParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(pascalParser.COMMA, i);
		}
		public ConstListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterConstList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitConstList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstListContext constList() {
		ConstListContext _localctx = new ConstListContext(Context, State);
		EnterRule(_localctx, 106, RULE_constList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516; constant();
			State = 521;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 517; Match(COMMA);
				State = 518; constant();
				}
				}
				State = 523;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public ITerminalNode FUNCTION() { return GetToken(pascalParser.FUNCTION, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(pascalParser.COLON, 0); }
		public ResultTypeContext resultType() {
			return GetRuleContext<ResultTypeContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(pascalParser.SEMI, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 108, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 524; Match(FUNCTION);
			State = 525; identifier();
			State = 527;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 526; formalParameterList();
				}
			}

			State = 529; Match(COLON);
			State = 530; resultType();
			State = 531; Match(SEMI);
			State = 532; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResultTypeContext : ParserRuleContext {
		public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		public ResultTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resultType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterResultType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitResultType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResultType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResultTypeContext resultType() {
		ResultTypeContext _localctx = new ResultTypeContext(Context, State);
		EnterRule(_localctx, 110, RULE_resultType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 534; typeIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(pascalParser.COLON, 0); }
		public UnlabelledStatementContext unlabelledStatement() {
			return GetRuleContext<UnlabelledStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 112, RULE_statement);
		try {
			State = 541;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUM_INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 536; label();
				State = 537; Match(COLON);
				State = 538; unlabelledStatement();
				}
				break;
			case BEGIN:
			case CASE:
			case ELSE:
			case END:
			case FOR:
			case GOTO:
			case IF:
			case REPEAT:
			case UNTIL:
			case WHILE:
			case WITH:
			case SEMI:
			case AT:
			case IDENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 540; unlabelledStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlabelledStatementContext : ParserRuleContext {
		public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		public StructuredStatementContext structuredStatement() {
			return GetRuleContext<StructuredStatementContext>(0);
		}
		public UnlabelledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlabelledStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterUnlabelledStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitUnlabelledStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlabelledStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnlabelledStatementContext unlabelledStatement() {
		UnlabelledStatementContext _localctx = new UnlabelledStatementContext(Context, State);
		EnterRule(_localctx, 114, RULE_unlabelledStatement);
		try {
			State = 545;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ELSE:
			case END:
			case GOTO:
			case UNTIL:
			case SEMI:
			case AT:
			case IDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 543; simpleStatement();
				}
				break;
			case BEGIN:
			case CASE:
			case FOR:
			case IF:
			case REPEAT:
			case WHILE:
			case WITH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 544; structuredStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStatementContext : ParserRuleContext {
		public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		public ProcedureStatementContext procedureStatement() {
			return GetRuleContext<ProcedureStatementContext>(0);
		}
		public GotoStatementContext gotoStatement() {
			return GetRuleContext<GotoStatementContext>(0);
		}
		public EmptyStatementContext emptyStatement() {
			return GetRuleContext<EmptyStatementContext>(0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterSimpleStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitSimpleStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStatementContext simpleStatement() {
		SimpleStatementContext _localctx = new SimpleStatementContext(Context, State);
		EnterRule(_localctx, 116, RULE_simpleStatement);
		try {
			State = 551;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 547; assignmentStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 548; procedureStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 549; gotoStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 550; emptyStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatementContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(pascalParser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterAssignmentStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitAssignmentStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatementContext assignmentStatement() {
		AssignmentStatementContext _localctx = new AssignmentStatementContext(Context, State);
		EnterRule(_localctx, 118, RULE_assignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 553; variable();
			State = 554; Match(ASSIGN);
			State = 555; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(pascalParser.AT, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] LBRACK() { return GetTokens(pascalParser.LBRACK); }
		public ITerminalNode LBRACK(int i) {
			return GetToken(pascalParser.LBRACK, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] RBRACK() { return GetTokens(pascalParser.RBRACK); }
		public ITerminalNode RBRACK(int i) {
			return GetToken(pascalParser.RBRACK, i);
		}
		public ITerminalNode[] LBRACK2() { return GetTokens(pascalParser.LBRACK2); }
		public ITerminalNode LBRACK2(int i) {
			return GetToken(pascalParser.LBRACK2, i);
		}
		public ITerminalNode[] RBRACK2() { return GetTokens(pascalParser.RBRACK2); }
		public ITerminalNode RBRACK2(int i) {
			return GetToken(pascalParser.RBRACK2, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(pascalParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(pascalParser.DOT, i);
		}
		public ITerminalNode[] POINTER() { return GetTokens(pascalParser.POINTER); }
		public ITerminalNode POINTER(int i) {
			return GetToken(pascalParser.POINTER, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(pascalParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(pascalParser.COMMA, i);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 120, RULE_variable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 560;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				{
				State = 557; Match(AT);
				State = 558; identifier();
				}
				break;
			case IDENT:
				{
				State = 559; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 589;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACK) | (1L << LBRACK2) | (1L << POINTER) | (1L << DOT))) != 0)) {
				{
				State = 587;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LBRACK:
					{
					State = 562; Match(LBRACK);
					State = 563; expression();
					State = 568;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 564; Match(COMMA);
						State = 565; expression();
						}
						}
						State = 570;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 571; Match(RBRACK);
					}
					break;
				case LBRACK2:
					{
					State = 573; Match(LBRACK2);
					State = 574; expression();
					State = 579;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 575; Match(COMMA);
						State = 576; expression();
						}
						}
						State = 581;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 582; Match(RBRACK2);
					}
					break;
				case DOT:
					{
					State = 584; Match(DOT);
					State = 585; identifier();
					}
					break;
				case POINTER:
					{
					State = 586; Match(POINTER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 591;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public RelationaloperatorContext relationaloperator() {
			return GetRuleContext<RelationaloperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 122, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 592; simpleExpression();
			State = 596;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IN) | (1L << EQUAL) | (1L << NOT_EQUAL) | (1L << LT) | (1L << LE) | (1L << GE) | (1L << GT))) != 0)) {
				{
				State = 593; relationaloperator();
				State = 594; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationaloperatorContext : ParserRuleContext {
		public ITerminalNode EQUAL() { return GetToken(pascalParser.EQUAL, 0); }
		public ITerminalNode NOT_EQUAL() { return GetToken(pascalParser.NOT_EQUAL, 0); }
		public ITerminalNode LT() { return GetToken(pascalParser.LT, 0); }
		public ITerminalNode LE() { return GetToken(pascalParser.LE, 0); }
		public ITerminalNode GE() { return GetToken(pascalParser.GE, 0); }
		public ITerminalNode GT() { return GetToken(pascalParser.GT, 0); }
		public ITerminalNode IN() { return GetToken(pascalParser.IN, 0); }
		public RelationaloperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationaloperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterRelationaloperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitRelationaloperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationaloperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationaloperatorContext relationaloperator() {
		RelationaloperatorContext _localctx = new RelationaloperatorContext(Context, State);
		EnterRule(_localctx, 124, RULE_relationaloperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 598;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IN) | (1L << EQUAL) | (1L << NOT_EQUAL) | (1L << LT) | (1L << LE) | (1L << GE) | (1L << GT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleExpressionContext : ParserRuleContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public AdditiveoperatorContext additiveoperator() {
			return GetRuleContext<AdditiveoperatorContext>(0);
		}
		public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public SimpleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterSimpleExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitSimpleExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExpressionContext simpleExpression() {
		SimpleExpressionContext _localctx = new SimpleExpressionContext(Context, State);
		EnterRule(_localctx, 126, RULE_simpleExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 600; term();
			State = 604;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OR) | (1L << PLUS) | (1L << MINUS))) != 0)) {
				{
				State = 601; additiveoperator();
				State = 602; simpleExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveoperatorContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(pascalParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(pascalParser.MINUS, 0); }
		public ITerminalNode OR() { return GetToken(pascalParser.OR, 0); }
		public AdditiveoperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveoperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterAdditiveoperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitAdditiveoperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveoperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveoperatorContext additiveoperator() {
		AdditiveoperatorContext _localctx = new AdditiveoperatorContext(Context, State);
		EnterRule(_localctx, 128, RULE_additiveoperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 606;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OR) | (1L << PLUS) | (1L << MINUS))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public SignedFactorContext signedFactor() {
			return GetRuleContext<SignedFactorContext>(0);
		}
		public MultiplicativeoperatorContext multiplicativeoperator() {
			return GetRuleContext<MultiplicativeoperatorContext>(0);
		}
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 130, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 608; signedFactor();
			State = 612;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << DIV) | (1L << MOD) | (1L << STAR) | (1L << SLASH))) != 0)) {
				{
				State = 609; multiplicativeoperator();
				State = 610; term();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeoperatorContext : ParserRuleContext {
		public ITerminalNode STAR() { return GetToken(pascalParser.STAR, 0); }
		public ITerminalNode SLASH() { return GetToken(pascalParser.SLASH, 0); }
		public ITerminalNode DIV() { return GetToken(pascalParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(pascalParser.MOD, 0); }
		public ITerminalNode AND() { return GetToken(pascalParser.AND, 0); }
		public MultiplicativeoperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeoperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterMultiplicativeoperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitMultiplicativeoperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeoperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeoperatorContext multiplicativeoperator() {
		MultiplicativeoperatorContext _localctx = new MultiplicativeoperatorContext(Context, State);
		EnterRule(_localctx, 132, RULE_multiplicativeoperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 614;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << DIV) | (1L << MOD) | (1L << STAR) | (1L << SLASH))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedFactorContext : ParserRuleContext {
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(pascalParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(pascalParser.MINUS, 0); }
		public SignedFactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedFactor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterSignedFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitSignedFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedFactorContext signedFactor() {
		SignedFactorContext _localctx = new SignedFactorContext(Context, State);
		EnterRule(_localctx, 134, RULE_signedFactor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 617;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 616;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 619; factor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(pascalParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(pascalParser.RPAREN, 0); }
		public FunctionDesignatorContext functionDesignator() {
			return GetRuleContext<FunctionDesignatorContext>(0);
		}
		public UnsignedConstantContext unsignedConstant() {
			return GetRuleContext<UnsignedConstantContext>(0);
		}
		public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(pascalParser.NOT, 0); }
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 136, RULE_factor);
		try {
			State = 632;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 621; variable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 622; Match(LPAREN);
				State = 623; expression();
				State = 624; Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 626; functionDesignator();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 627; unsignedConstant();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 628; set();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 629; Match(NOT);
				State = 630; factor();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 631; @bool();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedConstantContext : ParserRuleContext {
		public UnsignedNumberContext unsignedNumber() {
			return GetRuleContext<UnsignedNumberContext>(0);
		}
		public ConstantChrContext constantChr() {
			return GetRuleContext<ConstantChrContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ITerminalNode NIL() { return GetToken(pascalParser.NIL, 0); }
		public UnsignedConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedConstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterUnsignedConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitUnsignedConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedConstantContext unsignedConstant() {
		UnsignedConstantContext _localctx = new UnsignedConstantContext(Context, State);
		EnterRule(_localctx, 138, RULE_unsignedConstant);
		try {
			State = 638;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUM_INT:
			case NUM_REAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 634; unsignedNumber();
				}
				break;
			case CHR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 635; constantChr();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 636; @string();
				}
				break;
			case NIL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 637; Match(NIL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDesignatorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(pascalParser.LPAREN, 0); }
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(pascalParser.RPAREN, 0); }
		public FunctionDesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDesignator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterFunctionDesignator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitFunctionDesignator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDesignator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDesignatorContext functionDesignator() {
		FunctionDesignatorContext _localctx = new FunctionDesignatorContext(Context, State);
		EnterRule(_localctx, 140, RULE_functionDesignator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 640; identifier();
			State = 641; Match(LPAREN);
			State = 642; parameterList();
			State = 643; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ActualParameterContext[] actualParameter() {
			return GetRuleContexts<ActualParameterContext>();
		}
		public ActualParameterContext actualParameter(int i) {
			return GetRuleContext<ActualParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(pascalParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(pascalParser.COMMA, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 142, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 645; actualParameter();
			State = 650;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 646; Match(COMMA);
				State = 647; actualParameter();
				}
				}
				State = 652;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		public ITerminalNode LBRACK() { return GetToken(pascalParser.LBRACK, 0); }
		public ElementListContext elementList() {
			return GetRuleContext<ElementListContext>(0);
		}
		public ITerminalNode RBRACK() { return GetToken(pascalParser.RBRACK, 0); }
		public ITerminalNode LBRACK2() { return GetToken(pascalParser.LBRACK2, 0); }
		public ITerminalNode RBRACK2() { return GetToken(pascalParser.RBRACK2, 0); }
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(Context, State);
		EnterRule(_localctx, 144, RULE_set);
		try {
			State = 661;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 653; Match(LBRACK);
				State = 654; elementList();
				State = 655; Match(RBRACK);
				}
				break;
			case LBRACK2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 657; Match(LBRACK2);
				State = 658; elementList();
				State = 659; Match(RBRACK2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementListContext : ParserRuleContext {
		public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(pascalParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(pascalParser.COMMA, i);
		}
		public ElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterElementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitElementList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementListContext elementList() {
		ElementListContext _localctx = new ElementListContext(Context, State);
		EnterRule(_localctx, 146, RULE_elementList);
		int _la;
		try {
			State = 672;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHR:
			case NIL:
			case NOT:
			case PLUS:
			case MINUS:
			case LPAREN:
			case LBRACK:
			case LBRACK2:
			case AT:
			case TRUE:
			case FALSE:
			case IDENT:
			case STRING_LITERAL:
			case NUM_INT:
			case NUM_REAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 663; element();
				State = 668;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 664; Match(COMMA);
					State = 665; element();
					}
					}
					State = 670;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case RBRACK:
			case RBRACK2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode DOTDOT() { return GetToken(pascalParser.DOTDOT, 0); }
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 148, RULE_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 674; expression();
			State = 677;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOTDOT) {
				{
				State = 675; Match(DOTDOT);
				State = 676; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureStatementContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(pascalParser.LPAREN, 0); }
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(pascalParser.RPAREN, 0); }
		public ProcedureStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterProcedureStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitProcedureStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureStatementContext procedureStatement() {
		ProcedureStatementContext _localctx = new ProcedureStatementContext(Context, State);
		EnterRule(_localctx, 150, RULE_procedureStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 679; identifier();
			State = 684;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 680; Match(LPAREN);
				State = 681; parameterList();
				State = 682; Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualParameterContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParameterwidthContext[] parameterwidth() {
			return GetRuleContexts<ParameterwidthContext>();
		}
		public ParameterwidthContext parameterwidth(int i) {
			return GetRuleContext<ParameterwidthContext>(i);
		}
		public ActualParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actualParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterActualParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitActualParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActualParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActualParameterContext actualParameter() {
		ActualParameterContext _localctx = new ActualParameterContext(Context, State);
		EnterRule(_localctx, 152, RULE_actualParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 686; expression();
			State = 690;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COLON) {
				{
				{
				State = 687; parameterwidth();
				}
				}
				State = 692;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterwidthContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(pascalParser.COLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParameterwidthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterwidth; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterParameterwidth(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitParameterwidth(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterwidth(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterwidthContext parameterwidth() {
		ParameterwidthContext _localctx = new ParameterwidthContext(Context, State);
		EnterRule(_localctx, 154, RULE_parameterwidth);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 693; Match(COLON);
			State = 694; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoStatementContext : ParserRuleContext {
		public ITerminalNode GOTO() { return GetToken(pascalParser.GOTO, 0); }
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public GotoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterGotoStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitGotoStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotoStatementContext gotoStatement() {
		GotoStatementContext _localctx = new GotoStatementContext(Context, State);
		EnterRule(_localctx, 156, RULE_gotoStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 696; Match(GOTO);
			State = 697; label();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatementContext : ParserRuleContext {
		public EmptyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatementContext emptyStatement() {
		EmptyStatementContext _localctx = new EmptyStatementContext(Context, State);
		EnterRule(_localctx, 158, RULE_emptyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyContext : ParserRuleContext {
		public EmptyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterEmpty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitEmpty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyContext empty() {
		EmptyContext _localctx = new EmptyContext(Context, State);
		EnterRule(_localctx, 160, RULE_empty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructuredStatementContext : ParserRuleContext {
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public ConditionalStatementContext conditionalStatement() {
			return GetRuleContext<ConditionalStatementContext>(0);
		}
		public RepetetiveStatementContext repetetiveStatement() {
			return GetRuleContext<RepetetiveStatementContext>(0);
		}
		public WithStatementContext withStatement() {
			return GetRuleContext<WithStatementContext>(0);
		}
		public StructuredStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structuredStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterStructuredStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitStructuredStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructuredStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructuredStatementContext structuredStatement() {
		StructuredStatementContext _localctx = new StructuredStatementContext(Context, State);
		EnterRule(_localctx, 162, RULE_structuredStatement);
		try {
			State = 707;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BEGIN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 703; compoundStatement();
				}
				break;
			case CASE:
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 704; conditionalStatement();
				}
				break;
			case FOR:
			case REPEAT:
			case WHILE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 705; repetetiveStatement();
				}
				break;
			case WITH:
				EnterOuterAlt(_localctx, 4);
				{
				State = 706; withStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(pascalParser.BEGIN, 0); }
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode END() { return GetToken(pascalParser.END, 0); }
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 164, RULE_compoundStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 709; Match(BEGIN);
			State = 710; statements();
			State = 711; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode[] SEMI() { return GetTokens(pascalParser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(pascalParser.SEMI, i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 166, RULE_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 713; statement();
			State = 718;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMI) {
				{
				{
				State = 714; Match(SEMI);
				State = 715; statement();
				}
				}
				State = 720;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalStatementContext : ParserRuleContext {
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public CaseStatementContext caseStatement() {
			return GetRuleContext<CaseStatementContext>(0);
		}
		public ConditionalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterConditionalStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitConditionalStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalStatementContext conditionalStatement() {
		ConditionalStatementContext _localctx = new ConditionalStatementContext(Context, State);
		EnterRule(_localctx, 168, RULE_conditionalStatement);
		try {
			State = 723;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 721; ifStatement();
				}
				break;
			case CASE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 722; caseStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(pascalParser.IF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(pascalParser.THEN, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(pascalParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 170, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 725; Match(IF);
			State = 726; expression();
			State = 727; Match(THEN);
			State = 728; statement();
			State = 731;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				{
				State = 729; Match(ELSE);
				State = 730; statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(pascalParser.CASE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode OF() { return GetToken(pascalParser.OF, 0); }
		public CaseListElementContext[] caseListElement() {
			return GetRuleContexts<CaseListElementContext>();
		}
		public CaseListElementContext caseListElement(int i) {
			return GetRuleContext<CaseListElementContext>(i);
		}
		public ITerminalNode END() { return GetToken(pascalParser.END, 0); }
		public ITerminalNode[] SEMI() { return GetTokens(pascalParser.SEMI); }
		public ITerminalNode SEMI(int i) {
			return GetToken(pascalParser.SEMI, i);
		}
		public ITerminalNode ELSE() { return GetToken(pascalParser.ELSE, 0); }
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterCaseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitCaseStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 172, RULE_caseStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 733; Match(CASE);
			State = 734; expression();
			State = 735; Match(OF);
			State = 736; caseListElement();
			State = 741;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 737; Match(SEMI);
					State = 738; caseListElement();
					}
					} 
				}
				State = 743;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			}
			State = 747;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 744; Match(SEMI);
				State = 745; Match(ELSE);
				State = 746; statements();
				}
			}

			State = 749; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseListElementContext : ParserRuleContext {
		public ConstListContext constList() {
			return GetRuleContext<ConstListContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(pascalParser.COLON, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public CaseListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseListElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterCaseListElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitCaseListElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseListElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseListElementContext caseListElement() {
		CaseListElementContext _localctx = new CaseListElementContext(Context, State);
		EnterRule(_localctx, 174, RULE_caseListElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 751; constList();
			State = 752; Match(COLON);
			State = 753; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepetetiveStatementContext : ParserRuleContext {
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public RepeatStatementContext repeatStatement() {
			return GetRuleContext<RepeatStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public RepetetiveStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repetetiveStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterRepetetiveStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitRepetetiveStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepetetiveStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepetetiveStatementContext repetetiveStatement() {
		RepetetiveStatementContext _localctx = new RepetetiveStatementContext(Context, State);
		EnterRule(_localctx, 176, RULE_repetetiveStatement);
		try {
			State = 758;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 755; whileStatement();
				}
				break;
			case REPEAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 756; repeatStatement();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 757; forStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(pascalParser.WHILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DO() { return GetToken(pascalParser.DO, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 178, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 760; Match(WHILE);
			State = 761; expression();
			State = 762; Match(DO);
			State = 763; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementContext : ParserRuleContext {
		public ITerminalNode REPEAT() { return GetToken(pascalParser.REPEAT, 0); }
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode UNTIL() { return GetToken(pascalParser.UNTIL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterRepeatStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitRepeatStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementContext repeatStatement() {
		RepeatStatementContext _localctx = new RepeatStatementContext(Context, State);
		EnterRule(_localctx, 180, RULE_repeatStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 765; Match(REPEAT);
			State = 766; statements();
			State = 767; Match(UNTIL);
			State = 768; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(pascalParser.FOR, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(pascalParser.ASSIGN, 0); }
		public ForListContext forList() {
			return GetRuleContext<ForListContext>(0);
		}
		public ITerminalNode DO() { return GetToken(pascalParser.DO, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 182, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 770; Match(FOR);
			State = 771; identifier();
			State = 772; Match(ASSIGN);
			State = 773; forList();
			State = 774; Match(DO);
			State = 775; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForListContext : ParserRuleContext {
		public InitialValueContext initialValue() {
			return GetRuleContext<InitialValueContext>(0);
		}
		public FinalValueContext finalValue() {
			return GetRuleContext<FinalValueContext>(0);
		}
		public ITerminalNode TO() { return GetToken(pascalParser.TO, 0); }
		public ITerminalNode DOWNTO() { return GetToken(pascalParser.DOWNTO, 0); }
		public ForListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterForList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitForList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForListContext forList() {
		ForListContext _localctx = new ForListContext(Context, State);
		EnterRule(_localctx, 184, RULE_forList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 777; initialValue();
			State = 778;
			_la = TokenStream.LA(1);
			if ( !(_la==DOWNTO || _la==TO) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 779; finalValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitialValueContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitialValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initialValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterInitialValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitInitialValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitialValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitialValueContext initialValue() {
		InitialValueContext _localctx = new InitialValueContext(Context, State);
		EnterRule(_localctx, 186, RULE_initialValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 781; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinalValueContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FinalValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finalValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterFinalValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitFinalValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinalValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinalValueContext finalValue() {
		FinalValueContext _localctx = new FinalValueContext(Context, State);
		EnterRule(_localctx, 188, RULE_finalValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 783; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStatementContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(pascalParser.WITH, 0); }
		public RecordVariableListContext recordVariableList() {
			return GetRuleContext<RecordVariableListContext>(0);
		}
		public ITerminalNode DO() { return GetToken(pascalParser.DO, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WithStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterWithStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitWithStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStatementContext withStatement() {
		WithStatementContext _localctx = new WithStatementContext(Context, State);
		EnterRule(_localctx, 190, RULE_withStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 785; Match(WITH);
			State = 786; recordVariableList();
			State = 787; Match(DO);
			State = 788; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordVariableListContext : ParserRuleContext {
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(pascalParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(pascalParser.COMMA, i);
		}
		public RecordVariableListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordVariableList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.EnterRecordVariableList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IpascalListener typedListener = listener as IpascalListener;
			if (typedListener != null) typedListener.ExitRecordVariableList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpascalVisitor<TResult> typedVisitor = visitor as IpascalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordVariableList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordVariableListContext recordVariableList() {
		RecordVariableListContext _localctx = new RecordVariableListContext(Context, State);
		EnterRule(_localctx, 192, RULE_recordVariableList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 790; variable();
			State = 795;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 791; Match(COMMA);
				State = 792; variable();
				}
				}
				State = 797;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'R', '\x321', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', 
		'\xC7', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '\xD2', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'\xDA', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\a', '\x5', '\xE5', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\xE8', 
		'\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\a', '\a', '\xF4', '\n', '\a', '\f', '\a', '\xE', '\a', '\xF7', '\v', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x6', '\t', '\x101', '\n', '\t', 
		'\r', '\t', '\xE', '\t', '\x102', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', 
		'\f', '\x118', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x11C', 
		'\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x6', 
		'\x13', '\x12C', '\n', '\x13', '\r', '\x13', '\xE', '\x13', '\x12D', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', 
		'\x14', '\x135', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', 
		'\x139', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x5', '\x16', '\x140', '\n', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x145', '\n', '\x17', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x14B', 
		'\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', 
		'\x3', '\x1B', '\x5', '\x1B', '\x157', '\n', '\x1B', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x15C', '\n', '\x1C', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x162', '\n', 
		'\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', 
		'\x1E', '\x168', '\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x17A', '\n', 
		'\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\a', ' ', '\x17F', '\n', 
		' ', '\f', ' ', '\xE', ' ', '\x182', '\v', ' ', '\x3', '!', '\x3', '!', 
		'\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x5', '#', '\x18A', 
		'\n', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x5', '$', '\x191', '\n', '$', '\x3', '$', '\x5', '$', '\x194', '\n', 
		'$', '\x3', '%', '\x3', '%', '\x3', '%', '\a', '%', '\x199', '\n', '%', 
		'\f', '%', '\xE', '%', '\x19C', '\v', '%', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\a', '\'', '\x1A8', '\n', '\'', '\f', '\'', '\xE', 
		'\'', '\x1AB', '\v', '\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x5', '(', '\x1B2', '\n', '(', '\x3', ')', '\x3', ')', 
		'\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', '*', '\x3', '*', 
		'\x3', '*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', ',', '\x3', ',', 
		'\x3', ',', '\x3', ',', '\x5', ',', '\x1C4', '\n', ',', '\x3', '-', '\x3', 
		'-', '\x3', '-', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\a', 
		'.', '\x1CD', '\n', '.', '\f', '.', '\xE', '.', '\x1D0', '\v', '.', '\x3', 
		'.', '\x3', '.', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x31', '\x3', '\x31', '\x5', 
		'\x31', '\x1DD', '\n', '\x31', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x5', '\x32', '\x1E2', '\n', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\a', 
		'\x33', '\x1EB', '\n', '\x33', '\f', '\x33', '\xE', '\x33', '\x1EE', '\v', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x5', 
		'\x34', '\x1F9', '\n', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\a', '\x36', 
		'\x202', '\n', '\x36', '\f', '\x36', '\xE', '\x36', '\x205', '\v', '\x36', 
		'\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\a', '\x37', '\x20A', '\n', 
		'\x37', '\f', '\x37', '\xE', '\x37', '\x20D', '\v', '\x37', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\x212', '\n', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x39', '\x3', '\x39', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', 
		'\x3', ':', '\x5', ':', '\x220', '\n', ':', '\x3', ';', '\x3', ';', '\x5', 
		';', '\x224', '\n', ';', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', 
		'\x5', '<', '\x22A', '\n', '<', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\x3', '>', '\x3', '>', '\x3', '>', '\x5', '>', '\x233', '\n', '>', 
		'\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\a', '>', '\x239', '\n', 
		'>', '\f', '>', '\xE', '>', '\x23C', '\v', '>', '\x3', '>', '\x3', '>', 
		'\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\a', '>', '\x244', '\n', 
		'>', '\f', '>', '\xE', '>', '\x247', '\v', '>', '\x3', '>', '\x3', '>', 
		'\x3', '>', '\x3', '>', '\x3', '>', '\a', '>', '\x24E', '\n', '>', '\f', 
		'>', '\xE', '>', '\x251', '\v', '>', '\x3', '?', '\x3', '?', '\x3', '?', 
		'\x3', '?', '\x5', '?', '\x257', '\n', '?', '\x3', '@', '\x3', '@', '\x3', 
		'\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x5', '\x41', '\x25F', 
		'\n', '\x41', '\x3', '\x42', '\x3', '\x42', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x43', '\x3', '\x43', '\x5', '\x43', '\x267', '\n', '\x43', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x45', '\x5', '\x45', '\x26C', '\n', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', 
		'\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', 
		'\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x5', '\x46', '\x27B', '\n', 
		'\x46', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x5', 'G', '\x281', 
		'\n', 'G', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', 
		'\x3', 'I', '\x3', 'I', '\x3', 'I', '\a', 'I', '\x28B', '\n', 'I', '\f', 
		'I', '\xE', 'I', '\x28E', '\v', 'I', '\x3', 'J', '\x3', 'J', '\x3', 'J', 
		'\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x5', 'J', 
		'\x298', '\n', 'J', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\a', 'K', '\x29D', 
		'\n', 'K', '\f', 'K', '\xE', 'K', '\x2A0', '\v', 'K', '\x3', 'K', '\x5', 
		'K', '\x2A3', '\n', 'K', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x5', 'L', 
		'\x2A8', '\n', 'L', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 
		'M', '\x5', 'M', '\x2AF', '\n', 'M', '\x3', 'N', '\x3', 'N', '\a', 'N', 
		'\x2B3', '\n', 'N', '\f', 'N', '\xE', 'N', '\x2B6', '\v', 'N', '\x3', 
		'O', '\x3', 'O', '\x3', 'O', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x3', 
		'Q', '\x3', 'Q', '\x3', 'R', '\x3', 'R', '\x3', 'S', '\x3', 'S', '\x3', 
		'S', '\x3', 'S', '\x5', 'S', '\x2C6', '\n', 'S', '\x3', 'T', '\x3', 'T', 
		'\x3', 'T', '\x3', 'T', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\a', 'U', 
		'\x2CF', '\n', 'U', '\f', 'U', '\xE', 'U', '\x2D2', '\v', 'U', '\x3', 
		'V', '\x3', 'V', '\x5', 'V', '\x2D6', '\n', 'V', '\x3', 'W', '\x3', 'W', 
		'\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x5', 'W', '\x2DE', '\n', 
		'W', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 
		'X', '\a', 'X', '\x2E6', '\n', 'X', '\f', 'X', '\xE', 'X', '\x2E9', '\v', 
		'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x5', 'X', '\x2EE', '\n', 'X', 
		'\x3', 'X', '\x3', 'X', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', 
		'\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x5', 'Z', '\x2F9', '\n', 'Z', '\x3', 
		'[', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', '\\', '\x3', 
		'\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', ']', '\x3', ']', '\x3', 
		']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', '^', '\x3', 
		'^', '\x3', '^', '\x3', '^', '\x3', '_', '\x3', '_', '\x3', '`', '\x3', 
		'`', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x3', 
		'\x61', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\a', '\x62', '\x31C', 
		'\n', '\x62', '\f', '\x62', '\xE', '\x62', '\x31F', '\v', '\x62', '\x3', 
		'\x62', '\x2', '\x2', '\x63', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', 
		':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 
		'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 
		'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', 
		'\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', '\x96', 
		'\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', '\xA8', 
		'\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', '\xB6', '\xB8', '\xBA', 
		'\xBC', '\xBE', '\xC0', '\xC2', '\x2', '\t', '\x3', '\x2', '+', ',', '\x3', 
		'\x2', 'J', 'K', '\a', '\x2', '\x6', '\x6', '\b', '\b', '\x16', '\x16', 
		' ', ' ', 'H', 'H', '\x4', '\x2', '\x15', '\x15', '\x33', '\x38', '\x4', 
		'\x2', '\x1C', '\x1C', '+', ',', '\x6', '\x2', '\x3', '\x3', '\v', '\v', 
		'\x18', '\x18', '-', '.', '\x4', '\x2', '\r', '\r', '%', '%', '\x2', '\x31F', 
		'\x2', '\xC4', '\x3', '\x2', '\x2', '\x2', '\x4', '\xD9', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '\xDB', '\x3', '\x2', '\x2', '\x2', '\b', '\xE6', 
		'\x3', '\x2', '\x2', '\x2', '\n', '\xEB', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xE', '\xFA', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\xFC', '\x3', '\x2', '\x2', '\x2', '\x12', '\x104', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\x108', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x117', '\x3', '\x2', '\x2', '\x2', '\x18', '\x11B', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x11F', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\x121', '\x3', '\x2', '\x2', '\x2', 
		' ', '\x123', '\x3', '\x2', '\x2', '\x2', '\"', '\x125', '\x3', '\x2', 
		'\x2', '\x2', '$', '\x127', '\x3', '\x2', '\x2', '\x2', '&', '\x12F', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x136', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x13D', '\x3', '\x2', '\x2', '\x2', ',', '\x144', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x30', '\x14C', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x150', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x156', '\x3', '\x2', '\x2', '\x2', '\x36', '\x15B', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x161', '\x3', '\x2', '\x2', '\x2', ':', '\x163', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x179', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x17B', '\x3', '\x2', '\x2', '\x2', '@', '\x183', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x185', '\x3', '\x2', '\x2', '\x2', '\x44', '\x187', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x193', '\x3', '\x2', '\x2', '\x2', 
		'H', '\x195', '\x3', '\x2', '\x2', '\x2', 'J', '\x19D', '\x3', '\x2', 
		'\x2', '\x2', 'L', '\x1A1', '\x3', '\x2', '\x2', '\x2', 'N', '\x1B1', 
		'\x3', '\x2', '\x2', '\x2', 'P', '\x1B3', '\x3', '\x2', '\x2', '\x2', 
		'R', '\x1B9', '\x3', '\x2', '\x2', '\x2', 'T', '\x1BD', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\x1C3', '\x3', '\x2', '\x2', '\x2', 'X', '\x1C5', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '\x1C8', '\x3', '\x2', '\x2', '\x2', 
		'\\', '\x1D3', '\x3', '\x2', '\x2', '\x2', '^', '\x1D7', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x1DC', '\x3', '\x2', '\x2', '\x2', '\x62', '\x1DE', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x1E6', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\x1F8', '\x3', '\x2', '\x2', '\x2', 'h', '\x1FA', '\x3', '\x2', 
		'\x2', '\x2', 'j', '\x1FE', '\x3', '\x2', '\x2', '\x2', 'l', '\x206', 
		'\x3', '\x2', '\x2', '\x2', 'n', '\x20E', '\x3', '\x2', '\x2', '\x2', 
		'p', '\x218', '\x3', '\x2', '\x2', '\x2', 'r', '\x21F', '\x3', '\x2', 
		'\x2', '\x2', 't', '\x223', '\x3', '\x2', '\x2', '\x2', 'v', '\x229', 
		'\x3', '\x2', '\x2', '\x2', 'x', '\x22B', '\x3', '\x2', '\x2', '\x2', 
		'z', '\x232', '\x3', '\x2', '\x2', '\x2', '|', '\x252', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x258', '\x3', '\x2', '\x2', '\x2', '\x80', '\x25A', 
		'\x3', '\x2', '\x2', '\x2', '\x82', '\x260', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x262', '\x3', '\x2', '\x2', '\x2', '\x86', '\x268', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\x26B', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x27A', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x280', '\x3', '\x2', '\x2', '\x2', 
		'\x8E', '\x282', '\x3', '\x2', '\x2', '\x2', '\x90', '\x287', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x297', '\x3', '\x2', '\x2', '\x2', '\x94', '\x2A2', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x2A4', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x2A9', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x2B0', '\x3', '\x2', 
		'\x2', '\x2', '\x9C', '\x2B7', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x2BA', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\x2BD', '\x3', '\x2', '\x2', '\x2', 
		'\xA2', '\x2BF', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x2C5', '\x3', '\x2', 
		'\x2', '\x2', '\xA6', '\x2C7', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x2CB', 
		'\x3', '\x2', '\x2', '\x2', '\xAA', '\x2D5', '\x3', '\x2', '\x2', '\x2', 
		'\xAC', '\x2D7', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x2DF', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\x2F1', '\x3', '\x2', '\x2', '\x2', '\xB2', '\x2F8', 
		'\x3', '\x2', '\x2', '\x2', '\xB4', '\x2FA', '\x3', '\x2', '\x2', '\x2', 
		'\xB6', '\x2FF', '\x3', '\x2', '\x2', '\x2', '\xB8', '\x304', '\x3', '\x2', 
		'\x2', '\x2', '\xBA', '\x30B', '\x3', '\x2', '\x2', '\x2', '\xBC', '\x30F', 
		'\x3', '\x2', '\x2', '\x2', '\xBE', '\x311', '\x3', '\x2', '\x2', '\x2', 
		'\xC0', '\x313', '\x3', '\x2', '\x2', '\x2', '\xC2', '\x318', '\x3', '\x2', 
		'\x2', '\x2', '\xC4', '\xC6', '\x5', '\x4', '\x3', '\x2', '\xC5', '\xC7', 
		'\a', '\x46', '\x2', '\x2', '\xC6', '\xC5', '\x3', '\x2', '\x2', '\x2', 
		'\xC6', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\x3', '\x2', 
		'\x2', '\x2', '\xC8', '\xC9', '\x5', '\b', '\x5', '\x2', '\xC9', '\xCA', 
		'\a', '\x41', '\x2', '\x2', '\xCA', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\xCB', '\xCC', '\a', '\x1F', '\x2', '\x2', '\xCC', '\xD1', '\x5', '\x6', 
		'\x4', '\x2', '\xCD', '\xCE', '\a', '\x39', '\x2', '\x2', '\xCE', '\xCF', 
		'\x5', 'j', '\x36', '\x2', '\xCF', '\xD0', '\a', ':', '\x2', '\x2', '\xD0', 
		'\xD2', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xCD', '\x3', '\x2', '\x2', 
		'\x2', '\xD1', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', '\x3', 
		'\x2', '\x2', '\x2', '\xD3', '\xD4', '\a', '\x31', '\x2', '\x2', '\xD4', 
		'\xDA', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\a', '\x45', '\x2', 
		'\x2', '\xD6', '\xD7', '\x5', '\x6', '\x4', '\x2', '\xD7', '\xD8', '\a', 
		'\x31', '\x2', '\x2', '\xD8', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xD9', 
		'\xCB', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xD5', '\x3', '\x2', '\x2', 
		'\x2', '\xDA', '\x5', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', '\a', 
		'O', '\x2', '\x2', '\xDC', '\a', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xE5', 
		'\x5', '\f', '\a', '\x2', '\xDE', '\xE5', '\x5', '\x10', '\t', '\x2', 
		'\xDF', '\xE5', '\x5', '$', '\x13', '\x2', '\xE0', '\xE5', '\x5', 'Z', 
		'.', '\x2', '\xE1', '\xE5', '\x5', '^', '\x30', '\x2', '\xE2', '\xE5', 
		'\x5', '\n', '\x6', '\x2', '\xE3', '\xE5', '\a', 'I', '\x2', '\x2', '\xE4', 
		'\xDD', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xDE', '\x3', '\x2', '\x2', 
		'\x2', '\xE4', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE0', '\x3', 
		'\x2', '\x2', '\x2', '\xE4', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE4', 
		'\xE2', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE3', '\x3', '\x2', '\x2', 
		'\x2', '\xE5', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE4', '\x3', 
		'\x2', '\x2', '\x2', '\xE6', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE7', 
		'\xE9', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE6', '\x3', '\x2', '\x2', 
		'\x2', '\xE9', '\xEA', '\x5', '\xA6', 'T', '\x2', '\xEA', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\xEB', '\xEC', '\a', 'G', '\x2', '\x2', '\xEC', 
		'\xED', '\x5', 'j', '\x36', '\x2', '\xED', '\xEE', '\a', '\x31', '\x2', 
		'\x2', '\xEE', '\v', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF0', '\a', 
		'\x17', '\x2', '\x2', '\xF0', '\xF5', '\x5', '\xE', '\b', '\x2', '\xF1', 
		'\xF2', '\a', '\x30', '\x2', '\x2', '\xF2', '\xF4', '\x5', '\xE', '\b', 
		'\x2', '\xF3', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF7', '\x3', 
		'\x2', '\x2', '\x2', '\xF5', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF5', 
		'\xF6', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF8', '\x3', '\x2', '\x2', 
		'\x2', '\xF7', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF9', '\a', 
		'\x31', '\x2', '\x2', '\xF9', '\r', '\x3', '\x2', '\x2', '\x2', '\xFA', 
		'\xFB', '\x5', '\x1A', '\xE', '\x2', '\xFB', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\xFC', '\x100', '\a', '\n', '\x2', '\x2', '\xFD', '\xFE', '\x5', 
		'\x12', '\n', '\x2', '\xFE', '\xFF', '\a', '\x31', '\x2', '\x2', '\xFF', 
		'\x101', '\x3', '\x2', '\x2', '\x2', '\x100', '\xFD', '\x3', '\x2', '\x2', 
		'\x2', '\x101', '\x102', '\x3', '\x2', '\x2', '\x2', '\x102', '\x100', 
		'\x3', '\x2', '\x2', '\x2', '\x102', '\x103', '\x3', '\x2', '\x2', '\x2', 
		'\x103', '\x11', '\x3', '\x2', '\x2', '\x2', '\x104', '\x105', '\x5', 
		'\x6', '\x4', '\x2', '\x105', '\x106', '\a', '\x33', '\x2', '\x2', '\x106', 
		'\x107', '\x5', '\x16', '\f', '\x2', '\x107', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x108', '\x109', '\a', '\t', '\x2', '\x2', '\x109', '\x10A', '\a', 
		'\x39', '\x2', '\x2', '\x10A', '\x10B', '\x5', '\x1A', '\xE', '\x2', '\x10B', 
		'\x10C', '\a', ':', '\x2', '\x2', '\x10C', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x10D', '\x118', '\x5', '\x18', '\r', '\x2', '\x10E', '\x10F', 
		'\x5', '\x1E', '\x10', '\x2', '\x10F', '\x110', '\x5', '\x18', '\r', '\x2', 
		'\x110', '\x118', '\x3', '\x2', '\x2', '\x2', '\x111', '\x118', '\x5', 
		'\x6', '\x4', '\x2', '\x112', '\x113', '\x5', '\x1E', '\x10', '\x2', '\x113', 
		'\x114', '\x5', '\x6', '\x4', '\x2', '\x114', '\x118', '\x3', '\x2', '\x2', 
		'\x2', '\x115', '\x118', '\x5', '\"', '\x12', '\x2', '\x116', '\x118', 
		'\x5', '\x14', '\v', '\x2', '\x117', '\x10D', '\x3', '\x2', '\x2', '\x2', 
		'\x117', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x117', '\x111', '\x3', 
		'\x2', '\x2', '\x2', '\x117', '\x112', '\x3', '\x2', '\x2', '\x2', '\x117', 
		'\x115', '\x3', '\x2', '\x2', '\x2', '\x117', '\x116', '\x3', '\x2', '\x2', 
		'\x2', '\x118', '\x17', '\x3', '\x2', '\x2', '\x2', '\x119', '\x11C', 
		'\x5', '\x1A', '\xE', '\x2', '\x11A', '\x11C', '\x5', '\x1C', '\xF', '\x2', 
		'\x11B', '\x119', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11A', '\x3', 
		'\x2', '\x2', '\x2', '\x11C', '\x19', '\x3', '\x2', '\x2', '\x2', '\x11D', 
		'\x11E', '\a', 'Q', '\x2', '\x2', '\x11E', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x11F', '\x120', '\a', 'R', '\x2', '\x2', '\x120', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x121', '\x122', '\t', '\x2', '\x2', '\x2', '\x122', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x123', '\x124', '\t', '\x3', '\x2', 
		'\x2', '\x124', '!', '\x3', '\x2', '\x2', '\x2', '\x125', '\x126', '\a', 
		'P', '\x2', '\x2', '\x126', '#', '\x3', '\x2', '\x2', '\x2', '\x127', 
		'\x12B', '\a', '&', '\x2', '\x2', '\x128', '\x129', '\x5', '&', '\x14', 
		'\x2', '\x129', '\x12A', '\a', '\x31', '\x2', '\x2', '\x12A', '\x12C', 
		'\x3', '\x2', '\x2', '\x2', '\x12B', '\x128', '\x3', '\x2', '\x2', '\x2', 
		'\x12C', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12B', '\x3', 
		'\x2', '\x2', '\x2', '\x12D', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x12E', 
		'%', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x130', '\x5', '\x6', '\x4', 
		'\x2', '\x130', '\x134', '\a', '\x33', '\x2', '\x2', '\x131', '\x135', 
		'\x5', ',', '\x17', '\x2', '\x132', '\x135', '\x5', '(', '\x15', '\x2', 
		'\x133', '\x135', '\x5', '*', '\x16', '\x2', '\x134', '\x131', '\x3', 
		'\x2', '\x2', '\x2', '\x134', '\x132', '\x3', '\x2', '\x2', '\x2', '\x134', 
		'\x133', '\x3', '\x2', '\x2', '\x2', '\x135', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\x136', '\x138', '\a', '\x12', '\x2', '\x2', '\x137', '\x139', 
		'\x5', '\x64', '\x33', '\x2', '\x138', '\x137', '\x3', '\x2', '\x2', '\x2', 
		'\x138', '\x139', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13A', '\x3', 
		'\x2', '\x2', '\x2', '\x13A', '\x13B', '\a', '\x32', '\x2', '\x2', '\x13B', 
		'\x13C', '\x5', 'p', '\x39', '\x2', '\x13C', ')', '\x3', '\x2', '\x2', 
		'\x2', '\x13D', '\x13F', '\a', '\x1E', '\x2', '\x2', '\x13E', '\x140', 
		'\x5', '\x64', '\x33', '\x2', '\x13F', '\x13E', '\x3', '\x2', '\x2', '\x2', 
		'\x13F', '\x140', '\x3', '\x2', '\x2', '\x2', '\x140', '+', '\x3', '\x2', 
		'\x2', '\x2', '\x141', '\x145', '\x5', '.', '\x18', '\x2', '\x142', '\x145', 
		'\x5', '\x36', '\x1C', '\x2', '\x143', '\x145', '\x5', 'X', '-', '\x2', 
		'\x144', '\x141', '\x3', '\x2', '\x2', '\x2', '\x144', '\x142', '\x3', 
		'\x2', '\x2', '\x2', '\x144', '\x143', '\x3', '\x2', '\x2', '\x2', '\x145', 
		'-', '\x3', '\x2', '\x2', '\x2', '\x146', '\x14B', '\x5', '\x30', '\x19', 
		'\x2', '\x147', '\x14B', '\x5', '\x32', '\x1A', '\x2', '\x148', '\x14B', 
		'\x5', '\x34', '\x1B', '\x2', '\x149', '\x14B', '\x5', ':', '\x1E', '\x2', 
		'\x14A', '\x146', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x147', '\x3', 
		'\x2', '\x2', '\x2', '\x14A', '\x148', '\x3', '\x2', '\x2', '\x2', '\x14A', 
		'\x149', '\x3', '\x2', '\x2', '\x2', '\x14B', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x14C', '\x14D', '\a', '\x39', '\x2', '\x2', '\x14D', '\x14E', 
		'\x5', 'j', '\x36', '\x2', '\x14E', '\x14F', '\a', ':', '\x2', '\x2', 
		'\x14F', '\x31', '\x3', '\x2', '\x2', '\x2', '\x150', '\x151', '\x5', 
		'\x16', '\f', '\x2', '\x151', '\x152', '\a', '\x42', '\x2', '\x2', '\x152', 
		'\x153', '\x5', '\x16', '\f', '\x2', '\x153', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x154', '\x157', '\x5', '\x6', '\x4', '\x2', '\x155', '\x157', 
		'\t', '\x4', '\x2', '\x2', '\x156', '\x154', '\x3', '\x2', '\x2', '\x2', 
		'\x156', '\x155', '\x3', '\x2', '\x2', '\x2', '\x157', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x158', '\x159', '\a', '\x1D', '\x2', '\x2', '\x159', 
		'\x15C', '\x5', '\x38', '\x1D', '\x2', '\x15A', '\x15C', '\x5', '\x38', 
		'\x1D', '\x2', '\x15B', '\x158', '\x3', '\x2', '\x2', '\x2', '\x15B', 
		'\x15A', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x15D', '\x162', '\x5', '<', '\x1F', '\x2', '\x15E', '\x162', 
		'\x5', '\x44', '#', '\x2', '\x15F', '\x162', '\x5', 'R', '*', '\x2', '\x160', 
		'\x162', '\x5', 'V', ',', '\x2', '\x161', '\x15D', '\x3', '\x2', '\x2', 
		'\x2', '\x161', '\x15E', '\x3', '\x2', '\x2', '\x2', '\x161', '\x15F', 
		'\x3', '\x2', '\x2', '\x2', '\x161', '\x160', '\x3', '\x2', '\x2', '\x2', 
		'\x162', '\x39', '\x3', '\x2', '\x2', '\x2', '\x163', '\x164', '\a', 'H', 
		'\x2', '\x2', '\x164', '\x167', '\a', ';', '\x2', '\x2', '\x165', '\x168', 
		'\x5', '\x6', '\x4', '\x2', '\x166', '\x168', '\x5', '\x18', '\r', '\x2', 
		'\x167', '\x165', '\x3', '\x2', '\x2', '\x2', '\x167', '\x166', '\x3', 
		'\x2', '\x2', '\x2', '\x168', '\x169', '\x3', '\x2', '\x2', '\x2', '\x169', 
		'\x16A', '\a', '=', '\x2', '\x2', '\x16A', ';', '\x3', '\x2', '\x2', '\x2', 
		'\x16B', '\x16C', '\a', '\x4', '\x2', '\x2', '\x16C', '\x16D', '\a', ';', 
		'\x2', '\x2', '\x16D', '\x16E', '\x5', '>', ' ', '\x2', '\x16E', '\x16F', 
		'\a', '=', '\x2', '\x2', '\x16F', '\x170', '\a', '\x1B', '\x2', '\x2', 
		'\x170', '\x171', '\x5', '\x42', '\"', '\x2', '\x171', '\x17A', '\x3', 
		'\x2', '\x2', '\x2', '\x172', '\x173', '\a', '\x4', '\x2', '\x2', '\x173', 
		'\x174', '\a', '<', '\x2', '\x2', '\x174', '\x175', '\x5', '>', ' ', '\x2', 
		'\x175', '\x176', '\a', '>', '\x2', '\x2', '\x176', '\x177', '\a', '\x1B', 
		'\x2', '\x2', '\x177', '\x178', '\x5', '\x42', '\"', '\x2', '\x178', '\x17A', 
		'\x3', '\x2', '\x2', '\x2', '\x179', '\x16B', '\x3', '\x2', '\x2', '\x2', 
		'\x179', '\x172', '\x3', '\x2', '\x2', '\x2', '\x17A', '=', '\x3', '\x2', 
		'\x2', '\x2', '\x17B', '\x180', '\x5', '@', '!', '\x2', '\x17C', '\x17D', 
		'\a', '\x30', '\x2', '\x2', '\x17D', '\x17F', '\x5', '@', '!', '\x2', 
		'\x17E', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x17F', '\x182', '\x3', 
		'\x2', '\x2', '\x2', '\x180', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x180', 
		'\x181', '\x3', '\x2', '\x2', '\x2', '\x181', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x182', '\x180', '\x3', '\x2', '\x2', '\x2', '\x183', '\x184', 
		'\x5', '.', '\x18', '\x2', '\x184', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x185', '\x186', '\x5', ',', '\x17', '\x2', '\x186', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\x187', '\x189', '\a', '!', '\x2', '\x2', '\x188', '\x18A', 
		'\x5', '\x46', '$', '\x2', '\x189', '\x188', '\x3', '\x2', '\x2', '\x2', 
		'\x189', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x18B', '\x3', 
		'\x2', '\x2', '\x2', '\x18B', '\x18C', '\a', '\xF', '\x2', '\x2', '\x18C', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x190', '\x5', 'H', '%', 
		'\x2', '\x18E', '\x18F', '\a', '\x31', '\x2', '\x2', '\x18F', '\x191', 
		'\x5', 'L', '\'', '\x2', '\x190', '\x18E', '\x3', '\x2', '\x2', '\x2', 
		'\x190', '\x191', '\x3', '\x2', '\x2', '\x2', '\x191', '\x194', '\x3', 
		'\x2', '\x2', '\x2', '\x192', '\x194', '\x5', 'L', '\'', '\x2', '\x193', 
		'\x18D', '\x3', '\x2', '\x2', '\x2', '\x193', '\x192', '\x3', '\x2', '\x2', 
		'\x2', '\x194', 'G', '\x3', '\x2', '\x2', '\x2', '\x195', '\x19A', '\x5', 
		'J', '&', '\x2', '\x196', '\x197', '\a', '\x31', '\x2', '\x2', '\x197', 
		'\x199', '\x5', 'J', '&', '\x2', '\x198', '\x196', '\x3', '\x2', '\x2', 
		'\x2', '\x199', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x19A', '\x198', 
		'\x3', '\x2', '\x2', '\x2', '\x19A', '\x19B', '\x3', '\x2', '\x2', '\x2', 
		'\x19B', 'I', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x19A', '\x3', '\x2', 
		'\x2', '\x2', '\x19D', '\x19E', '\x5', 'j', '\x36', '\x2', '\x19E', '\x19F', 
		'\a', '\x32', '\x2', '\x2', '\x19F', '\x1A0', '\x5', ',', '\x17', '\x2', 
		'\x1A0', 'K', '\x3', '\x2', '\x2', '\x2', '\x1A1', '\x1A2', '\a', '\a', 
		'\x2', '\x2', '\x1A2', '\x1A3', '\x5', 'N', '(', '\x2', '\x1A3', '\x1A4', 
		'\a', '\x1B', '\x2', '\x2', '\x1A4', '\x1A9', '\x5', 'P', ')', '\x2', 
		'\x1A5', '\x1A6', '\a', '\x31', '\x2', '\x2', '\x1A6', '\x1A8', '\x5', 
		'P', ')', '\x2', '\x1A7', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A8', 
		'\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1A7', '\x3', '\x2', '\x2', 
		'\x2', '\x1A9', '\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1AA', 'M', '\x3', 
		'\x2', '\x2', '\x2', '\x1AB', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\x1AC', 
		'\x1AD', '\x5', '\x6', '\x4', '\x2', '\x1AD', '\x1AE', '\a', '\x32', '\x2', 
		'\x2', '\x1AE', '\x1AF', '\x5', '\x34', '\x1B', '\x2', '\x1AF', '\x1B2', 
		'\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1B2', '\x5', '\x34', '\x1B', '\x2', 
		'\x1B1', '\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1B0', '\x3', 
		'\x2', '\x2', '\x2', '\x1B2', 'O', '\x3', '\x2', '\x2', '\x2', '\x1B3', 
		'\x1B4', '\x5', 'l', '\x37', '\x2', '\x1B4', '\x1B5', '\a', '\x32', '\x2', 
		'\x2', '\x1B5', '\x1B6', '\a', '\x39', '\x2', '\x2', '\x1B6', '\x1B7', 
		'\x5', '\x46', '$', '\x2', '\x1B7', '\x1B8', '\a', ':', '\x2', '\x2', 
		'\x1B8', 'Q', '\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1BA', '\a', '#', 
		'\x2', '\x2', '\x1BA', '\x1BB', '\a', '\x1B', '\x2', '\x2', '\x1BB', '\x1BC', 
		'\x5', 'T', '+', '\x2', '\x1BC', 'S', '\x3', '\x2', '\x2', '\x2', '\x1BD', 
		'\x1BE', '\x5', '.', '\x18', '\x2', '\x1BE', 'U', '\x3', '\x2', '\x2', 
		'\x2', '\x1BF', '\x1C0', '\a', '\x10', '\x2', '\x2', '\x1C0', '\x1C1', 
		'\a', '\x1B', '\x2', '\x2', '\x1C1', '\x1C4', '\x5', ',', '\x17', '\x2', 
		'\x1C2', '\x1C4', '\a', '\x10', '\x2', '\x2', '\x1C3', '\x1BF', '\x3', 
		'\x2', '\x2', '\x2', '\x1C3', '\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C4', 
		'W', '\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1C6', '\a', '?', '\x2', '\x2', 
		'\x1C6', '\x1C7', '\x5', '\x34', '\x1B', '\x2', '\x1C7', 'Y', '\x3', '\x2', 
		'\x2', '\x2', '\x1C8', '\x1C9', '\a', '(', '\x2', '\x2', '\x1C9', '\x1CE', 
		'\x5', '\\', '/', '\x2', '\x1CA', '\x1CB', '\a', '\x31', '\x2', '\x2', 
		'\x1CB', '\x1CD', '\x5', '\\', '/', '\x2', '\x1CC', '\x1CA', '\x3', '\x2', 
		'\x2', '\x2', '\x1CD', '\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1CC', 
		'\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1CF', '\x3', '\x2', '\x2', '\x2', 
		'\x1CF', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1CE', '\x3', 
		'\x2', '\x2', '\x2', '\x1D1', '\x1D2', '\a', '\x31', '\x2', '\x2', '\x1D2', 
		'[', '\x3', '\x2', '\x2', '\x2', '\x1D3', '\x1D4', '\x5', 'j', '\x36', 
		'\x2', '\x1D4', '\x1D5', '\a', '\x32', '\x2', '\x2', '\x1D5', '\x1D6', 
		'\x5', ',', '\x17', '\x2', '\x1D6', ']', '\x3', '\x2', '\x2', '\x2', '\x1D7', 
		'\x1D8', '\x5', '`', '\x31', '\x2', '\x1D8', '\x1D9', '\a', '\x31', '\x2', 
		'\x2', '\x1D9', '_', '\x3', '\x2', '\x2', '\x2', '\x1DA', '\x1DD', '\x5', 
		'\x62', '\x32', '\x2', '\x1DB', '\x1DD', '\x5', 'n', '\x38', '\x2', '\x1DC', 
		'\x1DA', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1DB', '\x3', '\x2', '\x2', 
		'\x2', '\x1DD', '\x61', '\x3', '\x2', '\x2', '\x2', '\x1DE', '\x1DF', 
		'\a', '\x1E', '\x2', '\x2', '\x1DF', '\x1E1', '\x5', '\x6', '\x4', '\x2', 
		'\x1E0', '\x1E2', '\x5', '\x64', '\x33', '\x2', '\x1E1', '\x1E0', '\x3', 
		'\x2', '\x2', '\x2', '\x1E1', '\x1E2', '\x3', '\x2', '\x2', '\x2', '\x1E2', 
		'\x1E3', '\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1E4', '\a', '\x31', '\x2', 
		'\x2', '\x1E4', '\x1E5', '\x5', '\b', '\x5', '\x2', '\x1E5', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x1E6', '\x1E7', '\a', '\x39', '\x2', '\x2', '\x1E7', 
		'\x1EC', '\x5', '\x66', '\x34', '\x2', '\x1E8', '\x1E9', '\a', '\x31', 
		'\x2', '\x2', '\x1E9', '\x1EB', '\x5', '\x66', '\x34', '\x2', '\x1EA', 
		'\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1EE', '\x3', '\x2', '\x2', 
		'\x2', '\x1EC', '\x1EA', '\x3', '\x2', '\x2', '\x2', '\x1EC', '\x1ED', 
		'\x3', '\x2', '\x2', '\x2', '\x1ED', '\x1EF', '\x3', '\x2', '\x2', '\x2', 
		'\x1EE', '\x1EC', '\x3', '\x2', '\x2', '\x2', '\x1EF', '\x1F0', '\a', 
		':', '\x2', '\x2', '\x1F0', '\x65', '\x3', '\x2', '\x2', '\x2', '\x1F1', 
		'\x1F9', '\x5', 'h', '\x35', '\x2', '\x1F2', '\x1F3', '\a', '(', '\x2', 
		'\x2', '\x1F3', '\x1F9', '\x5', 'h', '\x35', '\x2', '\x1F4', '\x1F5', 
		'\a', '\x12', '\x2', '\x2', '\x1F5', '\x1F9', '\x5', 'h', '\x35', '\x2', 
		'\x1F6', '\x1F7', '\a', '\x1E', '\x2', '\x2', '\x1F7', '\x1F9', '\x5', 
		'h', '\x35', '\x2', '\x1F8', '\x1F1', '\x3', '\x2', '\x2', '\x2', '\x1F8', 
		'\x1F2', '\x3', '\x2', '\x2', '\x2', '\x1F8', '\x1F4', '\x3', '\x2', '\x2', 
		'\x2', '\x1F8', '\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1F9', 'g', '\x3', 
		'\x2', '\x2', '\x2', '\x1FA', '\x1FB', '\x5', 'j', '\x36', '\x2', '\x1FB', 
		'\x1FC', '\a', '\x32', '\x2', '\x2', '\x1FC', '\x1FD', '\x5', '\x34', 
		'\x1B', '\x2', '\x1FD', 'i', '\x3', '\x2', '\x2', '\x2', '\x1FE', '\x203', 
		'\x5', '\x6', '\x4', '\x2', '\x1FF', '\x200', '\a', '\x30', '\x2', '\x2', 
		'\x200', '\x202', '\x5', '\x6', '\x4', '\x2', '\x201', '\x1FF', '\x3', 
		'\x2', '\x2', '\x2', '\x202', '\x205', '\x3', '\x2', '\x2', '\x2', '\x203', 
		'\x201', '\x3', '\x2', '\x2', '\x2', '\x203', '\x204', '\x3', '\x2', '\x2', 
		'\x2', '\x204', 'k', '\x3', '\x2', '\x2', '\x2', '\x205', '\x203', '\x3', 
		'\x2', '\x2', '\x2', '\x206', '\x20B', '\x5', '\x16', '\f', '\x2', '\x207', 
		'\x208', '\a', '\x30', '\x2', '\x2', '\x208', '\x20A', '\x5', '\x16', 
		'\f', '\x2', '\x209', '\x207', '\x3', '\x2', '\x2', '\x2', '\x20A', '\x20D', 
		'\x3', '\x2', '\x2', '\x2', '\x20B', '\x209', '\x3', '\x2', '\x2', '\x2', 
		'\x20B', '\x20C', '\x3', '\x2', '\x2', '\x2', '\x20C', 'm', '\x3', '\x2', 
		'\x2', '\x2', '\x20D', '\x20B', '\x3', '\x2', '\x2', '\x2', '\x20E', '\x20F', 
		'\a', '\x12', '\x2', '\x2', '\x20F', '\x211', '\x5', '\x6', '\x4', '\x2', 
		'\x210', '\x212', '\x5', '\x64', '\x33', '\x2', '\x211', '\x210', '\x3', 
		'\x2', '\x2', '\x2', '\x211', '\x212', '\x3', '\x2', '\x2', '\x2', '\x212', 
		'\x213', '\x3', '\x2', '\x2', '\x2', '\x213', '\x214', '\a', '\x32', '\x2', 
		'\x2', '\x214', '\x215', '\x5', 'p', '\x39', '\x2', '\x215', '\x216', 
		'\a', '\x31', '\x2', '\x2', '\x216', '\x217', '\x5', '\b', '\x5', '\x2', 
		'\x217', 'o', '\x3', '\x2', '\x2', '\x2', '\x218', '\x219', '\x5', '\x34', 
		'\x1B', '\x2', '\x219', 'q', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x21B', 
		'\x5', '\xE', '\b', '\x2', '\x21B', '\x21C', '\a', '\x32', '\x2', '\x2', 
		'\x21C', '\x21D', '\x5', 't', ';', '\x2', '\x21D', '\x220', '\x3', '\x2', 
		'\x2', '\x2', '\x21E', '\x220', '\x5', 't', ';', '\x2', '\x21F', '\x21A', 
		'\x3', '\x2', '\x2', '\x2', '\x21F', '\x21E', '\x3', '\x2', '\x2', '\x2', 
		'\x220', 's', '\x3', '\x2', '\x2', '\x2', '\x221', '\x224', '\x5', 'v', 
		'<', '\x2', '\x222', '\x224', '\x5', '\xA4', 'S', '\x2', '\x223', '\x221', 
		'\x3', '\x2', '\x2', '\x2', '\x223', '\x222', '\x3', '\x2', '\x2', '\x2', 
		'\x224', 'u', '\x3', '\x2', '\x2', '\x2', '\x225', '\x22A', '\x5', 'x', 
		'=', '\x2', '\x226', '\x22A', '\x5', '\x98', 'M', '\x2', '\x227', '\x22A', 
		'\x5', '\x9E', 'P', '\x2', '\x228', '\x22A', '\x5', '\xA0', 'Q', '\x2', 
		'\x229', '\x225', '\x3', '\x2', '\x2', '\x2', '\x229', '\x226', '\x3', 
		'\x2', '\x2', '\x2', '\x229', '\x227', '\x3', '\x2', '\x2', '\x2', '\x229', 
		'\x228', '\x3', '\x2', '\x2', '\x2', '\x22A', 'w', '\x3', '\x2', '\x2', 
		'\x2', '\x22B', '\x22C', '\x5', 'z', '>', '\x2', '\x22C', '\x22D', '\a', 
		'/', '\x2', '\x2', '\x22D', '\x22E', '\x5', '|', '?', '\x2', '\x22E', 
		'y', '\x3', '\x2', '\x2', '\x2', '\x22F', '\x230', '\a', '@', '\x2', '\x2', 
		'\x230', '\x233', '\x5', '\x6', '\x4', '\x2', '\x231', '\x233', '\x5', 
		'\x6', '\x4', '\x2', '\x232', '\x22F', '\x3', '\x2', '\x2', '\x2', '\x232', 
		'\x231', '\x3', '\x2', '\x2', '\x2', '\x233', '\x24F', '\x3', '\x2', '\x2', 
		'\x2', '\x234', '\x235', '\a', ';', '\x2', '\x2', '\x235', '\x23A', '\x5', 
		'|', '?', '\x2', '\x236', '\x237', '\a', '\x30', '\x2', '\x2', '\x237', 
		'\x239', '\x5', '|', '?', '\x2', '\x238', '\x236', '\x3', '\x2', '\x2', 
		'\x2', '\x239', '\x23C', '\x3', '\x2', '\x2', '\x2', '\x23A', '\x238', 
		'\x3', '\x2', '\x2', '\x2', '\x23A', '\x23B', '\x3', '\x2', '\x2', '\x2', 
		'\x23B', '\x23D', '\x3', '\x2', '\x2', '\x2', '\x23C', '\x23A', '\x3', 
		'\x2', '\x2', '\x2', '\x23D', '\x23E', '\a', '=', '\x2', '\x2', '\x23E', 
		'\x24E', '\x3', '\x2', '\x2', '\x2', '\x23F', '\x240', '\a', '<', '\x2', 
		'\x2', '\x240', '\x245', '\x5', '|', '?', '\x2', '\x241', '\x242', '\a', 
		'\x30', '\x2', '\x2', '\x242', '\x244', '\x5', '|', '?', '\x2', '\x243', 
		'\x241', '\x3', '\x2', '\x2', '\x2', '\x244', '\x247', '\x3', '\x2', '\x2', 
		'\x2', '\x245', '\x243', '\x3', '\x2', '\x2', '\x2', '\x245', '\x246', 
		'\x3', '\x2', '\x2', '\x2', '\x246', '\x248', '\x3', '\x2', '\x2', '\x2', 
		'\x247', '\x245', '\x3', '\x2', '\x2', '\x2', '\x248', '\x249', '\a', 
		'>', '\x2', '\x2', '\x249', '\x24E', '\x3', '\x2', '\x2', '\x2', '\x24A', 
		'\x24B', '\a', '\x41', '\x2', '\x2', '\x24B', '\x24E', '\x5', '\x6', '\x4', 
		'\x2', '\x24C', '\x24E', '\a', '?', '\x2', '\x2', '\x24D', '\x234', '\x3', 
		'\x2', '\x2', '\x2', '\x24D', '\x23F', '\x3', '\x2', '\x2', '\x2', '\x24D', 
		'\x24A', '\x3', '\x2', '\x2', '\x2', '\x24D', '\x24C', '\x3', '\x2', '\x2', 
		'\x2', '\x24E', '\x251', '\x3', '\x2', '\x2', '\x2', '\x24F', '\x24D', 
		'\x3', '\x2', '\x2', '\x2', '\x24F', '\x250', '\x3', '\x2', '\x2', '\x2', 
		'\x250', '{', '\x3', '\x2', '\x2', '\x2', '\x251', '\x24F', '\x3', '\x2', 
		'\x2', '\x2', '\x252', '\x256', '\x5', '\x80', '\x41', '\x2', '\x253', 
		'\x254', '\x5', '~', '@', '\x2', '\x254', '\x255', '\x5', '|', '?', '\x2', 
		'\x255', '\x257', '\x3', '\x2', '\x2', '\x2', '\x256', '\x253', '\x3', 
		'\x2', '\x2', '\x2', '\x256', '\x257', '\x3', '\x2', '\x2', '\x2', '\x257', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x258', '\x259', '\t', '\x5', '\x2', 
		'\x2', '\x259', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x25A', '\x25E', 
		'\x5', '\x84', '\x43', '\x2', '\x25B', '\x25C', '\x5', '\x82', '\x42', 
		'\x2', '\x25C', '\x25D', '\x5', '\x80', '\x41', '\x2', '\x25D', '\x25F', 
		'\x3', '\x2', '\x2', '\x2', '\x25E', '\x25B', '\x3', '\x2', '\x2', '\x2', 
		'\x25E', '\x25F', '\x3', '\x2', '\x2', '\x2', '\x25F', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x260', '\x261', '\t', '\x6', '\x2', '\x2', '\x261', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x262', '\x266', '\x5', '\x88', '\x45', 
		'\x2', '\x263', '\x264', '\x5', '\x86', '\x44', '\x2', '\x264', '\x265', 
		'\x5', '\x84', '\x43', '\x2', '\x265', '\x267', '\x3', '\x2', '\x2', '\x2', 
		'\x266', '\x263', '\x3', '\x2', '\x2', '\x2', '\x266', '\x267', '\x3', 
		'\x2', '\x2', '\x2', '\x267', '\x85', '\x3', '\x2', '\x2', '\x2', '\x268', 
		'\x269', '\t', '\a', '\x2', '\x2', '\x269', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x26A', '\x26C', '\t', '\x2', '\x2', '\x2', '\x26B', '\x26A', 
		'\x3', '\x2', '\x2', '\x2', '\x26B', '\x26C', '\x3', '\x2', '\x2', '\x2', 
		'\x26C', '\x26D', '\x3', '\x2', '\x2', '\x2', '\x26D', '\x26E', '\x5', 
		'\x8A', '\x46', '\x2', '\x26E', '\x89', '\x3', '\x2', '\x2', '\x2', '\x26F', 
		'\x27B', '\x5', 'z', '>', '\x2', '\x270', '\x271', '\a', '\x39', '\x2', 
		'\x2', '\x271', '\x272', '\x5', '|', '?', '\x2', '\x272', '\x273', '\a', 
		':', '\x2', '\x2', '\x273', '\x27B', '\x3', '\x2', '\x2', '\x2', '\x274', 
		'\x27B', '\x5', '\x8E', 'H', '\x2', '\x275', '\x27B', '\x5', '\x8C', 'G', 
		'\x2', '\x276', '\x27B', '\x5', '\x92', 'J', '\x2', '\x277', '\x278', 
		'\a', '\x1A', '\x2', '\x2', '\x278', '\x27B', '\x5', '\x8A', '\x46', '\x2', 
		'\x279', '\x27B', '\x5', ' ', '\x11', '\x2', '\x27A', '\x26F', '\x3', 
		'\x2', '\x2', '\x2', '\x27A', '\x270', '\x3', '\x2', '\x2', '\x2', '\x27A', 
		'\x274', '\x3', '\x2', '\x2', '\x2', '\x27A', '\x275', '\x3', '\x2', '\x2', 
		'\x2', '\x27A', '\x276', '\x3', '\x2', '\x2', '\x2', '\x27A', '\x277', 
		'\x3', '\x2', '\x2', '\x2', '\x27A', '\x279', '\x3', '\x2', '\x2', '\x2', 
		'\x27B', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x27C', '\x281', '\x5', 
		'\x18', '\r', '\x2', '\x27D', '\x281', '\x5', '\x14', '\v', '\x2', '\x27E', 
		'\x281', '\x5', '\"', '\x12', '\x2', '\x27F', '\x281', '\a', '\x19', '\x2', 
		'\x2', '\x280', '\x27C', '\x3', '\x2', '\x2', '\x2', '\x280', '\x27D', 
		'\x3', '\x2', '\x2', '\x2', '\x280', '\x27E', '\x3', '\x2', '\x2', '\x2', 
		'\x280', '\x27F', '\x3', '\x2', '\x2', '\x2', '\x281', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x282', '\x283', '\x5', '\x6', '\x4', '\x2', '\x283', 
		'\x284', '\a', '\x39', '\x2', '\x2', '\x284', '\x285', '\x5', '\x90', 
		'I', '\x2', '\x285', '\x286', '\a', ':', '\x2', '\x2', '\x286', '\x8F', 
		'\x3', '\x2', '\x2', '\x2', '\x287', '\x28C', '\x5', '\x9A', 'N', '\x2', 
		'\x288', '\x289', '\a', '\x30', '\x2', '\x2', '\x289', '\x28B', '\x5', 
		'\x9A', 'N', '\x2', '\x28A', '\x288', '\x3', '\x2', '\x2', '\x2', '\x28B', 
		'\x28E', '\x3', '\x2', '\x2', '\x2', '\x28C', '\x28A', '\x3', '\x2', '\x2', 
		'\x2', '\x28C', '\x28D', '\x3', '\x2', '\x2', '\x2', '\x28D', '\x91', 
		'\x3', '\x2', '\x2', '\x2', '\x28E', '\x28C', '\x3', '\x2', '\x2', '\x2', 
		'\x28F', '\x290', '\a', ';', '\x2', '\x2', '\x290', '\x291', '\x5', '\x94', 
		'K', '\x2', '\x291', '\x292', '\a', '=', '\x2', '\x2', '\x292', '\x298', 
		'\x3', '\x2', '\x2', '\x2', '\x293', '\x294', '\a', '<', '\x2', '\x2', 
		'\x294', '\x295', '\x5', '\x94', 'K', '\x2', '\x295', '\x296', '\a', '>', 
		'\x2', '\x2', '\x296', '\x298', '\x3', '\x2', '\x2', '\x2', '\x297', '\x28F', 
		'\x3', '\x2', '\x2', '\x2', '\x297', '\x293', '\x3', '\x2', '\x2', '\x2', 
		'\x298', '\x93', '\x3', '\x2', '\x2', '\x2', '\x299', '\x29E', '\x5', 
		'\x96', 'L', '\x2', '\x29A', '\x29B', '\a', '\x30', '\x2', '\x2', '\x29B', 
		'\x29D', '\x5', '\x96', 'L', '\x2', '\x29C', '\x29A', '\x3', '\x2', '\x2', 
		'\x2', '\x29D', '\x2A0', '\x3', '\x2', '\x2', '\x2', '\x29E', '\x29C', 
		'\x3', '\x2', '\x2', '\x2', '\x29E', '\x29F', '\x3', '\x2', '\x2', '\x2', 
		'\x29F', '\x2A3', '\x3', '\x2', '\x2', '\x2', '\x2A0', '\x29E', '\x3', 
		'\x2', '\x2', '\x2', '\x2A1', '\x2A3', '\x3', '\x2', '\x2', '\x2', '\x2A2', 
		'\x299', '\x3', '\x2', '\x2', '\x2', '\x2A2', '\x2A1', '\x3', '\x2', '\x2', 
		'\x2', '\x2A3', '\x95', '\x3', '\x2', '\x2', '\x2', '\x2A4', '\x2A7', 
		'\x5', '|', '?', '\x2', '\x2A5', '\x2A6', '\a', '\x42', '\x2', '\x2', 
		'\x2A6', '\x2A8', '\x5', '|', '?', '\x2', '\x2A7', '\x2A5', '\x3', '\x2', 
		'\x2', '\x2', '\x2A7', '\x2A8', '\x3', '\x2', '\x2', '\x2', '\x2A8', '\x97', 
		'\x3', '\x2', '\x2', '\x2', '\x2A9', '\x2AE', '\x5', '\x6', '\x4', '\x2', 
		'\x2AA', '\x2AB', '\a', '\x39', '\x2', '\x2', '\x2AB', '\x2AC', '\x5', 
		'\x90', 'I', '\x2', '\x2AC', '\x2AD', '\a', ':', '\x2', '\x2', '\x2AD', 
		'\x2AF', '\x3', '\x2', '\x2', '\x2', '\x2AE', '\x2AA', '\x3', '\x2', '\x2', 
		'\x2', '\x2AE', '\x2AF', '\x3', '\x2', '\x2', '\x2', '\x2AF', '\x99', 
		'\x3', '\x2', '\x2', '\x2', '\x2B0', '\x2B4', '\x5', '|', '?', '\x2', 
		'\x2B1', '\x2B3', '\x5', '\x9C', 'O', '\x2', '\x2B2', '\x2B1', '\x3', 
		'\x2', '\x2', '\x2', '\x2B3', '\x2B6', '\x3', '\x2', '\x2', '\x2', '\x2B4', 
		'\x2B2', '\x3', '\x2', '\x2', '\x2', '\x2B4', '\x2B5', '\x3', '\x2', '\x2', 
		'\x2', '\x2B5', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x2B6', '\x2B4', 
		'\x3', '\x2', '\x2', '\x2', '\x2B7', '\x2B8', '\a', '\x32', '\x2', '\x2', 
		'\x2B8', '\x2B9', '\x5', '|', '?', '\x2', '\x2B9', '\x9D', '\x3', '\x2', 
		'\x2', '\x2', '\x2BA', '\x2BB', '\a', '\x13', '\x2', '\x2', '\x2BB', '\x2BC', 
		'\x5', '\xE', '\b', '\x2', '\x2BC', '\x9F', '\x3', '\x2', '\x2', '\x2', 
		'\x2BD', '\x2BE', '\x3', '\x2', '\x2', '\x2', '\x2BE', '\xA1', '\x3', 
		'\x2', '\x2', '\x2', '\x2BF', '\x2C0', '\x3', '\x2', '\x2', '\x2', '\x2C0', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\x2C1', '\x2C6', '\x5', '\xA6', 'T', 
		'\x2', '\x2C2', '\x2C6', '\x5', '\xAA', 'V', '\x2', '\x2C3', '\x2C6', 
		'\x5', '\xB2', 'Z', '\x2', '\x2C4', '\x2C6', '\x5', '\xC0', '\x61', '\x2', 
		'\x2C5', '\x2C1', '\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2C2', '\x3', 
		'\x2', '\x2', '\x2', '\x2C5', '\x2C3', '\x3', '\x2', '\x2', '\x2', '\x2C5', 
		'\x2C4', '\x3', '\x2', '\x2', '\x2', '\x2C6', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\x2C7', '\x2C8', '\a', '\x5', '\x2', '\x2', '\x2C8', '\x2C9', 
		'\x5', '\xA8', 'U', '\x2', '\x2C9', '\x2CA', '\a', '\xF', '\x2', '\x2', 
		'\x2CA', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x2CB', '\x2D0', '\x5', 
		'r', ':', '\x2', '\x2CC', '\x2CD', '\a', '\x31', '\x2', '\x2', '\x2CD', 
		'\x2CF', '\x5', 'r', ':', '\x2', '\x2CE', '\x2CC', '\x3', '\x2', '\x2', 
		'\x2', '\x2CF', '\x2D2', '\x3', '\x2', '\x2', '\x2', '\x2D0', '\x2CE', 
		'\x3', '\x2', '\x2', '\x2', '\x2D0', '\x2D1', '\x3', '\x2', '\x2', '\x2', 
		'\x2D1', '\xA9', '\x3', '\x2', '\x2', '\x2', '\x2D2', '\x2D0', '\x3', 
		'\x2', '\x2', '\x2', '\x2D3', '\x2D6', '\x5', '\xAC', 'W', '\x2', '\x2D4', 
		'\x2D6', '\x5', '\xAE', 'X', '\x2', '\x2D5', '\x2D3', '\x3', '\x2', '\x2', 
		'\x2', '\x2D5', '\x2D4', '\x3', '\x2', '\x2', '\x2', '\x2D6', '\xAB', 
		'\x3', '\x2', '\x2', '\x2', '\x2D7', '\x2D8', '\a', '\x14', '\x2', '\x2', 
		'\x2D8', '\x2D9', '\x5', '|', '?', '\x2', '\x2D9', '\x2DA', '\a', '$', 
		'\x2', '\x2', '\x2DA', '\x2DD', '\x5', 'r', ':', '\x2', '\x2DB', '\x2DC', 
		'\a', '\xE', '\x2', '\x2', '\x2DC', '\x2DE', '\x5', 'r', ':', '\x2', '\x2DD', 
		'\x2DB', '\x3', '\x2', '\x2', '\x2', '\x2DD', '\x2DE', '\x3', '\x2', '\x2', 
		'\x2', '\x2DE', '\xAD', '\x3', '\x2', '\x2', '\x2', '\x2DF', '\x2E0', 
		'\a', '\a', '\x2', '\x2', '\x2E0', '\x2E1', '\x5', '|', '?', '\x2', '\x2E1', 
		'\x2E2', '\a', '\x1B', '\x2', '\x2', '\x2E2', '\x2E7', '\x5', '\xB0', 
		'Y', '\x2', '\x2E3', '\x2E4', '\a', '\x31', '\x2', '\x2', '\x2E4', '\x2E6', 
		'\x5', '\xB0', 'Y', '\x2', '\x2E5', '\x2E3', '\x3', '\x2', '\x2', '\x2', 
		'\x2E6', '\x2E9', '\x3', '\x2', '\x2', '\x2', '\x2E7', '\x2E5', '\x3', 
		'\x2', '\x2', '\x2', '\x2E7', '\x2E8', '\x3', '\x2', '\x2', '\x2', '\x2E8', 
		'\x2ED', '\x3', '\x2', '\x2', '\x2', '\x2E9', '\x2E7', '\x3', '\x2', '\x2', 
		'\x2', '\x2EA', '\x2EB', '\a', '\x31', '\x2', '\x2', '\x2EB', '\x2EC', 
		'\a', '\xE', '\x2', '\x2', '\x2EC', '\x2EE', '\x5', '\xA8', 'U', '\x2', 
		'\x2ED', '\x2EA', '\x3', '\x2', '\x2', '\x2', '\x2ED', '\x2EE', '\x3', 
		'\x2', '\x2', '\x2', '\x2EE', '\x2EF', '\x3', '\x2', '\x2', '\x2', '\x2EF', 
		'\x2F0', '\a', '\xF', '\x2', '\x2', '\x2F0', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\x2F1', '\x2F2', '\x5', 'l', '\x37', '\x2', '\x2F2', '\x2F3', 
		'\a', '\x32', '\x2', '\x2', '\x2F3', '\x2F4', '\x5', 'r', ':', '\x2', 
		'\x2F4', '\xB1', '\x3', '\x2', '\x2', '\x2', '\x2F5', '\x2F9', '\x5', 
		'\xB4', '[', '\x2', '\x2F6', '\x2F9', '\x5', '\xB6', '\\', '\x2', '\x2F7', 
		'\x2F9', '\x5', '\xB8', ']', '\x2', '\x2F8', '\x2F5', '\x3', '\x2', '\x2', 
		'\x2', '\x2F8', '\x2F6', '\x3', '\x2', '\x2', '\x2', '\x2F8', '\x2F7', 
		'\x3', '\x2', '\x2', '\x2', '\x2F9', '\xB3', '\x3', '\x2', '\x2', '\x2', 
		'\x2FA', '\x2FB', '\a', ')', '\x2', '\x2', '\x2FB', '\x2FC', '\x5', '|', 
		'?', '\x2', '\x2FC', '\x2FD', '\a', '\f', '\x2', '\x2', '\x2FD', '\x2FE', 
		'\x5', 'r', ':', '\x2', '\x2FE', '\xB5', '\x3', '\x2', '\x2', '\x2', '\x2FF', 
		'\x300', '\a', '\"', '\x2', '\x2', '\x300', '\x301', '\x5', '\xA8', 'U', 
		'\x2', '\x301', '\x302', '\a', '\'', '\x2', '\x2', '\x302', '\x303', '\x5', 
		'|', '?', '\x2', '\x303', '\xB7', '\x3', '\x2', '\x2', '\x2', '\x304', 
		'\x305', '\a', '\x11', '\x2', '\x2', '\x305', '\x306', '\x5', '\x6', '\x4', 
		'\x2', '\x306', '\x307', '\a', '/', '\x2', '\x2', '\x307', '\x308', '\x5', 
		'\xBA', '^', '\x2', '\x308', '\x309', '\a', '\f', '\x2', '\x2', '\x309', 
		'\x30A', '\x5', 'r', ':', '\x2', '\x30A', '\xB9', '\x3', '\x2', '\x2', 
		'\x2', '\x30B', '\x30C', '\x5', '\xBC', '_', '\x2', '\x30C', '\x30D', 
		'\t', '\b', '\x2', '\x2', '\x30D', '\x30E', '\x5', '\xBE', '`', '\x2', 
		'\x30E', '\xBB', '\x3', '\x2', '\x2', '\x2', '\x30F', '\x310', '\x5', 
		'|', '?', '\x2', '\x310', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x311', 
		'\x312', '\x5', '|', '?', '\x2', '\x312', '\xBF', '\x3', '\x2', '\x2', 
		'\x2', '\x313', '\x314', '\a', '*', '\x2', '\x2', '\x314', '\x315', '\x5', 
		'\xC2', '\x62', '\x2', '\x315', '\x316', '\a', '\f', '\x2', '\x2', '\x316', 
		'\x317', '\x5', 'r', ':', '\x2', '\x317', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', '\x318', '\x31D', '\x5', 'z', '>', '\x2', '\x319', '\x31A', '\a', 
		'\x30', '\x2', '\x2', '\x31A', '\x31C', '\x5', 'z', '>', '\x2', '\x31B', 
		'\x319', '\x3', '\x2', '\x2', '\x2', '\x31C', '\x31F', '\x3', '\x2', '\x2', 
		'\x2', '\x31D', '\x31B', '\x3', '\x2', '\x2', '\x2', '\x31D', '\x31E', 
		'\x3', '\x2', '\x2', '\x2', '\x31E', '\xC3', '\x3', '\x2', '\x2', '\x2', 
		'\x31F', '\x31D', '\x3', '\x2', '\x2', '\x2', '\x43', '\xC6', '\xD1', 
		'\xD9', '\xE4', '\xE6', '\xF5', '\x102', '\x117', '\x11B', '\x12D', '\x134', 
		'\x138', '\x13F', '\x144', '\x14A', '\x156', '\x15B', '\x161', '\x167', 
		'\x179', '\x180', '\x189', '\x190', '\x193', '\x19A', '\x1A9', '\x1B1', 
		'\x1C3', '\x1CE', '\x1DC', '\x1E1', '\x1EC', '\x1F8', '\x203', '\x20B', 
		'\x211', '\x21F', '\x223', '\x229', '\x232', '\x23A', '\x245', '\x24D', 
		'\x24F', '\x256', '\x25E', '\x266', '\x26B', '\x27A', '\x280', '\x28C', 
		'\x297', '\x29E', '\x2A2', '\x2A7', '\x2AE', '\x2B4', '\x2C5', '\x2D0', 
		'\x2D5', '\x2DD', '\x2E7', '\x2ED', '\x2F8', '\x31D',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
