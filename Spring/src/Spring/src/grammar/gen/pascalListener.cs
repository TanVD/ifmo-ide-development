//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/tanvd/csc/ide/pascal-lang/Spring/src/Spring/src/grammar/pascal.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="pascalParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public interface IpascalListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] pascalParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] pascalParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.programHeading"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgramHeading([NotNull] pascalParser.ProgramHeadingContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.programHeading"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgramHeading([NotNull] pascalParser.ProgramHeadingContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifier([NotNull] pascalParser.IdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifier([NotNull] pascalParser.IdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] pascalParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] pascalParser.BlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.usesUnitsPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUsesUnitsPart([NotNull] pascalParser.UsesUnitsPartContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.usesUnitsPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUsesUnitsPart([NotNull] pascalParser.UsesUnitsPartContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.labelDeclarationPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLabelDeclarationPart([NotNull] pascalParser.LabelDeclarationPartContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.labelDeclarationPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLabelDeclarationPart([NotNull] pascalParser.LabelDeclarationPartContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.label"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLabel([NotNull] pascalParser.LabelContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.label"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLabel([NotNull] pascalParser.LabelContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.constantDefinitionPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstantDefinitionPart([NotNull] pascalParser.ConstantDefinitionPartContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.constantDefinitionPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstantDefinitionPart([NotNull] pascalParser.ConstantDefinitionPartContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.constantDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstantDefinition([NotNull] pascalParser.ConstantDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.constantDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstantDefinition([NotNull] pascalParser.ConstantDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.constantChr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstantChr([NotNull] pascalParser.ConstantChrContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.constantChr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstantChr([NotNull] pascalParser.ConstantChrContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstant([NotNull] pascalParser.ConstantContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstant([NotNull] pascalParser.ConstantContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.unsignedNumber"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnsignedNumber([NotNull] pascalParser.UnsignedNumberContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.unsignedNumber"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnsignedNumber([NotNull] pascalParser.UnsignedNumberContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.unsignedInteger"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnsignedInteger([NotNull] pascalParser.UnsignedIntegerContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.unsignedInteger"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnsignedInteger([NotNull] pascalParser.UnsignedIntegerContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.unsignedReal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnsignedReal([NotNull] pascalParser.UnsignedRealContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.unsignedReal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnsignedReal([NotNull] pascalParser.UnsignedRealContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.sign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSign([NotNull] pascalParser.SignContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.sign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSign([NotNull] pascalParser.SignContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.bool"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBool([NotNull] pascalParser.BoolContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.bool"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBool([NotNull] pascalParser.BoolContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.string"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterString([NotNull] pascalParser.StringContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.string"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitString([NotNull] pascalParser.StringContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.typeDefinitionPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeDefinitionPart([NotNull] pascalParser.TypeDefinitionPartContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.typeDefinitionPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeDefinitionPart([NotNull] pascalParser.TypeDefinitionPartContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.typeDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeDefinition([NotNull] pascalParser.TypeDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.typeDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeDefinition([NotNull] pascalParser.TypeDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.functionType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionType([NotNull] pascalParser.FunctionTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.functionType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionType([NotNull] pascalParser.FunctionTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.procedureType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProcedureType([NotNull] pascalParser.ProcedureTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.procedureType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProcedureType([NotNull] pascalParser.ProcedureTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType([NotNull] pascalParser.TypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType([NotNull] pascalParser.TypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.simpleType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimpleType([NotNull] pascalParser.SimpleTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.simpleType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimpleType([NotNull] pascalParser.SimpleTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.scalarType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterScalarType([NotNull] pascalParser.ScalarTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.scalarType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitScalarType([NotNull] pascalParser.ScalarTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.subrangeType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSubrangeType([NotNull] pascalParser.SubrangeTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.subrangeType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSubrangeType([NotNull] pascalParser.SubrangeTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.typeIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeIdentifier([NotNull] pascalParser.TypeIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.typeIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeIdentifier([NotNull] pascalParser.TypeIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.structuredType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStructuredType([NotNull] pascalParser.StructuredTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.structuredType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStructuredType([NotNull] pascalParser.StructuredTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.unpackedStructuredType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnpackedStructuredType([NotNull] pascalParser.UnpackedStructuredTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.unpackedStructuredType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnpackedStructuredType([NotNull] pascalParser.UnpackedStructuredTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.stringtype"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringtype([NotNull] pascalParser.StringtypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.stringtype"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringtype([NotNull] pascalParser.StringtypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.arrayType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayType([NotNull] pascalParser.ArrayTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.arrayType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayType([NotNull] pascalParser.ArrayTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.typeList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeList([NotNull] pascalParser.TypeListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.typeList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeList([NotNull] pascalParser.TypeListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.indexType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIndexType([NotNull] pascalParser.IndexTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.indexType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIndexType([NotNull] pascalParser.IndexTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.componentType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComponentType([NotNull] pascalParser.ComponentTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.componentType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComponentType([NotNull] pascalParser.ComponentTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.recordType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRecordType([NotNull] pascalParser.RecordTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.recordType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRecordType([NotNull] pascalParser.RecordTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.fieldList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFieldList([NotNull] pascalParser.FieldListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.fieldList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFieldList([NotNull] pascalParser.FieldListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.fixedPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFixedPart([NotNull] pascalParser.FixedPartContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.fixedPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFixedPart([NotNull] pascalParser.FixedPartContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.recordSection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRecordSection([NotNull] pascalParser.RecordSectionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.recordSection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRecordSection([NotNull] pascalParser.RecordSectionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.variantPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariantPart([NotNull] pascalParser.VariantPartContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.variantPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariantPart([NotNull] pascalParser.VariantPartContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.tag"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTag([NotNull] pascalParser.TagContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.tag"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTag([NotNull] pascalParser.TagContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.variant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariant([NotNull] pascalParser.VariantContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.variant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariant([NotNull] pascalParser.VariantContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.setType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSetType([NotNull] pascalParser.SetTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.setType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSetType([NotNull] pascalParser.SetTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.baseType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBaseType([NotNull] pascalParser.BaseTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.baseType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBaseType([NotNull] pascalParser.BaseTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.fileType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFileType([NotNull] pascalParser.FileTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.fileType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFileType([NotNull] pascalParser.FileTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.pointerType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPointerType([NotNull] pascalParser.PointerTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.pointerType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPointerType([NotNull] pascalParser.PointerTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.variableDeclarationPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableDeclarationPart([NotNull] pascalParser.VariableDeclarationPartContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.variableDeclarationPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableDeclarationPart([NotNull] pascalParser.VariableDeclarationPartContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableDeclaration([NotNull] pascalParser.VariableDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableDeclaration([NotNull] pascalParser.VariableDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.procedureAndFunctionDeclarationPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProcedureAndFunctionDeclarationPart([NotNull] pascalParser.ProcedureAndFunctionDeclarationPartContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.procedureAndFunctionDeclarationPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProcedureAndFunctionDeclarationPart([NotNull] pascalParser.ProcedureAndFunctionDeclarationPartContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.procedureOrFunctionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProcedureOrFunctionDeclaration([NotNull] pascalParser.ProcedureOrFunctionDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.procedureOrFunctionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProcedureOrFunctionDeclaration([NotNull] pascalParser.ProcedureOrFunctionDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.procedureDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProcedureDeclaration([NotNull] pascalParser.ProcedureDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.procedureDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProcedureDeclaration([NotNull] pascalParser.ProcedureDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.formalParameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFormalParameterList([NotNull] pascalParser.FormalParameterListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.formalParameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFormalParameterList([NotNull] pascalParser.FormalParameterListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.formalParameterSection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFormalParameterSection([NotNull] pascalParser.FormalParameterSectionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.formalParameterSection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFormalParameterSection([NotNull] pascalParser.FormalParameterSectionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.parameterGroup"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameterGroup([NotNull] pascalParser.ParameterGroupContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.parameterGroup"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameterGroup([NotNull] pascalParser.ParameterGroupContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.identifierList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierList([NotNull] pascalParser.IdentifierListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.identifierList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierList([NotNull] pascalParser.IdentifierListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.constList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstList([NotNull] pascalParser.ConstListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.constList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstList([NotNull] pascalParser.ConstListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionDeclaration([NotNull] pascalParser.FunctionDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionDeclaration([NotNull] pascalParser.FunctionDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.resultType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterResultType([NotNull] pascalParser.ResultTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.resultType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitResultType([NotNull] pascalParser.ResultTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] pascalParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] pascalParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.unlabelledStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnlabelledStatement([NotNull] pascalParser.UnlabelledStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.unlabelledStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnlabelledStatement([NotNull] pascalParser.UnlabelledStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.simpleStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimpleStatement([NotNull] pascalParser.SimpleStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.simpleStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimpleStatement([NotNull] pascalParser.SimpleStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.assignmentStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignmentStatement([NotNull] pascalParser.AssignmentStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.assignmentStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignmentStatement([NotNull] pascalParser.AssignmentStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.variable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariable([NotNull] pascalParser.VariableContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.variable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariable([NotNull] pascalParser.VariableContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] pascalParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] pascalParser.ExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.relationaloperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelationaloperator([NotNull] pascalParser.RelationaloperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.relationaloperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelationaloperator([NotNull] pascalParser.RelationaloperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.simpleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimpleExpression([NotNull] pascalParser.SimpleExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.simpleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimpleExpression([NotNull] pascalParser.SimpleExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.additiveoperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdditiveoperator([NotNull] pascalParser.AdditiveoperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.additiveoperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdditiveoperator([NotNull] pascalParser.AdditiveoperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTerm([NotNull] pascalParser.TermContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTerm([NotNull] pascalParser.TermContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.multiplicativeoperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplicativeoperator([NotNull] pascalParser.MultiplicativeoperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.multiplicativeoperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplicativeoperator([NotNull] pascalParser.MultiplicativeoperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.signedFactor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSignedFactor([NotNull] pascalParser.SignedFactorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.signedFactor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSignedFactor([NotNull] pascalParser.SignedFactorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFactor([NotNull] pascalParser.FactorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFactor([NotNull] pascalParser.FactorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.unsignedConstant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnsignedConstant([NotNull] pascalParser.UnsignedConstantContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.unsignedConstant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnsignedConstant([NotNull] pascalParser.UnsignedConstantContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.functionDesignator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionDesignator([NotNull] pascalParser.FunctionDesignatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.functionDesignator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionDesignator([NotNull] pascalParser.FunctionDesignatorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.parameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameterList([NotNull] pascalParser.ParameterListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.parameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameterList([NotNull] pascalParser.ParameterListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.set"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSet([NotNull] pascalParser.SetContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.set"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSet([NotNull] pascalParser.SetContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.elementList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElementList([NotNull] pascalParser.ElementListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.elementList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElementList([NotNull] pascalParser.ElementListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElement([NotNull] pascalParser.ElementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElement([NotNull] pascalParser.ElementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.procedureStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProcedureStatement([NotNull] pascalParser.ProcedureStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.procedureStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProcedureStatement([NotNull] pascalParser.ProcedureStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.actualParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterActualParameter([NotNull] pascalParser.ActualParameterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.actualParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitActualParameter([NotNull] pascalParser.ActualParameterContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.parameterwidth"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameterwidth([NotNull] pascalParser.ParameterwidthContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.parameterwidth"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameterwidth([NotNull] pascalParser.ParameterwidthContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.gotoStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGotoStatement([NotNull] pascalParser.GotoStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.gotoStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGotoStatement([NotNull] pascalParser.GotoStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.emptyStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEmptyStatement([NotNull] pascalParser.EmptyStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.emptyStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEmptyStatement([NotNull] pascalParser.EmptyStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.empty"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEmpty([NotNull] pascalParser.EmptyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.empty"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEmpty([NotNull] pascalParser.EmptyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.structuredStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStructuredStatement([NotNull] pascalParser.StructuredStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.structuredStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStructuredStatement([NotNull] pascalParser.StructuredStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.compoundStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCompoundStatement([NotNull] pascalParser.CompoundStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.compoundStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCompoundStatement([NotNull] pascalParser.CompoundStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.statements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatements([NotNull] pascalParser.StatementsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.statements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatements([NotNull] pascalParser.StatementsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.conditionalStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConditionalStatement([NotNull] pascalParser.ConditionalStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.conditionalStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConditionalStatement([NotNull] pascalParser.ConditionalStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] pascalParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] pascalParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.caseStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCaseStatement([NotNull] pascalParser.CaseStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.caseStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCaseStatement([NotNull] pascalParser.CaseStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.caseListElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCaseListElement([NotNull] pascalParser.CaseListElementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.caseListElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCaseListElement([NotNull] pascalParser.CaseListElementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.repetetiveStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRepetetiveStatement([NotNull] pascalParser.RepetetiveStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.repetetiveStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRepetetiveStatement([NotNull] pascalParser.RepetetiveStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStatement([NotNull] pascalParser.WhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStatement([NotNull] pascalParser.WhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.repeatStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRepeatStatement([NotNull] pascalParser.RepeatStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.repeatStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRepeatStatement([NotNull] pascalParser.RepeatStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForStatement([NotNull] pascalParser.ForStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForStatement([NotNull] pascalParser.ForStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.forList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForList([NotNull] pascalParser.ForListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.forList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForList([NotNull] pascalParser.ForListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.initialValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInitialValue([NotNull] pascalParser.InitialValueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.initialValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInitialValue([NotNull] pascalParser.InitialValueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.finalValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFinalValue([NotNull] pascalParser.FinalValueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.finalValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFinalValue([NotNull] pascalParser.FinalValueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.withStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWithStatement([NotNull] pascalParser.WithStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.withStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWithStatement([NotNull] pascalParser.WithStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="pascalParser.recordVariableList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRecordVariableList([NotNull] pascalParser.RecordVariableListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="pascalParser.recordVariableList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRecordVariableList([NotNull] pascalParser.RecordVariableListContext context);
}
