//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/tanvd/csc/ide/pascal-lang/Spring/src/Spring/src/grammar/pascal.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="pascalParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public interface IpascalVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProgram([NotNull] pascalParser.ProgramContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.programHeading"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProgramHeading([NotNull] pascalParser.ProgramHeadingContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdentifier([NotNull] pascalParser.IdentifierContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBlock([NotNull] pascalParser.BlockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.usesUnitsPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUsesUnitsPart([NotNull] pascalParser.UsesUnitsPartContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.labelDeclarationPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLabelDeclarationPart([NotNull] pascalParser.LabelDeclarationPartContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.label"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLabel([NotNull] pascalParser.LabelContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.constantDefinitionPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstantDefinitionPart([NotNull] pascalParser.ConstantDefinitionPartContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.constantDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstantDefinition([NotNull] pascalParser.ConstantDefinitionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.constantChr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstantChr([NotNull] pascalParser.ConstantChrContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstant([NotNull] pascalParser.ConstantContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.unsignedNumber"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnsignedNumber([NotNull] pascalParser.UnsignedNumberContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.unsignedInteger"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnsignedInteger([NotNull] pascalParser.UnsignedIntegerContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.unsignedReal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnsignedReal([NotNull] pascalParser.UnsignedRealContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.sign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSign([NotNull] pascalParser.SignContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.bool"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBool([NotNull] pascalParser.BoolContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.string"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitString([NotNull] pascalParser.StringContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.typeDefinitionPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypeDefinitionPart([NotNull] pascalParser.TypeDefinitionPartContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.typeDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypeDefinition([NotNull] pascalParser.TypeDefinitionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.functionType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionType([NotNull] pascalParser.FunctionTypeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.procedureType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProcedureType([NotNull] pascalParser.ProcedureTypeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitType([NotNull] pascalParser.TypeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.simpleType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSimpleType([NotNull] pascalParser.SimpleTypeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.scalarType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitScalarType([NotNull] pascalParser.ScalarTypeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.subrangeType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSubrangeType([NotNull] pascalParser.SubrangeTypeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.typeIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypeIdentifier([NotNull] pascalParser.TypeIdentifierContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.structuredType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStructuredType([NotNull] pascalParser.StructuredTypeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.unpackedStructuredType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnpackedStructuredType([NotNull] pascalParser.UnpackedStructuredTypeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.stringtype"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStringtype([NotNull] pascalParser.StringtypeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.arrayType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArrayType([NotNull] pascalParser.ArrayTypeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.typeList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypeList([NotNull] pascalParser.TypeListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.indexType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIndexType([NotNull] pascalParser.IndexTypeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.componentType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitComponentType([NotNull] pascalParser.ComponentTypeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.recordType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRecordType([NotNull] pascalParser.RecordTypeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.fieldList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFieldList([NotNull] pascalParser.FieldListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.fixedPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFixedPart([NotNull] pascalParser.FixedPartContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.recordSection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRecordSection([NotNull] pascalParser.RecordSectionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.variantPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariantPart([NotNull] pascalParser.VariantPartContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.tag"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTag([NotNull] pascalParser.TagContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.variant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariant([NotNull] pascalParser.VariantContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.setType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSetType([NotNull] pascalParser.SetTypeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.baseType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBaseType([NotNull] pascalParser.BaseTypeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.fileType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFileType([NotNull] pascalParser.FileTypeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.pointerType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPointerType([NotNull] pascalParser.PointerTypeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.variableDeclarationPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariableDeclarationPart([NotNull] pascalParser.VariableDeclarationPartContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariableDeclaration([NotNull] pascalParser.VariableDeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.procedureAndFunctionDeclarationPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProcedureAndFunctionDeclarationPart([NotNull] pascalParser.ProcedureAndFunctionDeclarationPartContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.procedureOrFunctionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProcedureOrFunctionDeclaration([NotNull] pascalParser.ProcedureOrFunctionDeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.procedureDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProcedureDeclaration([NotNull] pascalParser.ProcedureDeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.formalParameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFormalParameterList([NotNull] pascalParser.FormalParameterListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.formalParameterSection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFormalParameterSection([NotNull] pascalParser.FormalParameterSectionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.parameterGroup"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParameterGroup([NotNull] pascalParser.ParameterGroupContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.identifierList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdentifierList([NotNull] pascalParser.IdentifierListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.constList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstList([NotNull] pascalParser.ConstListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionDeclaration([NotNull] pascalParser.FunctionDeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.resultType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitResultType([NotNull] pascalParser.ResultTypeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement([NotNull] pascalParser.StatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.unlabelledStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnlabelledStatement([NotNull] pascalParser.UnlabelledStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.simpleStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSimpleStatement([NotNull] pascalParser.SimpleStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.assignmentStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignmentStatement([NotNull] pascalParser.AssignmentStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.variable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariable([NotNull] pascalParser.VariableContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpression([NotNull] pascalParser.ExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.relationaloperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRelationaloperator([NotNull] pascalParser.RelationaloperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.simpleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSimpleExpression([NotNull] pascalParser.SimpleExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.additiveoperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAdditiveoperator([NotNull] pascalParser.AdditiveoperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTerm([NotNull] pascalParser.TermContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.multiplicativeoperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMultiplicativeoperator([NotNull] pascalParser.MultiplicativeoperatorContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.signedFactor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSignedFactor([NotNull] pascalParser.SignedFactorContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFactor([NotNull] pascalParser.FactorContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.unsignedConstant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnsignedConstant([NotNull] pascalParser.UnsignedConstantContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.functionDesignator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionDesignator([NotNull] pascalParser.FunctionDesignatorContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.parameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParameterList([NotNull] pascalParser.ParameterListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.set"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSet([NotNull] pascalParser.SetContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.elementList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitElementList([NotNull] pascalParser.ElementListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitElement([NotNull] pascalParser.ElementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.procedureStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProcedureStatement([NotNull] pascalParser.ProcedureStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.actualParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitActualParameter([NotNull] pascalParser.ActualParameterContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.parameterwidth"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParameterwidth([NotNull] pascalParser.ParameterwidthContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.gotoStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGotoStatement([NotNull] pascalParser.GotoStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.emptyStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEmptyStatement([NotNull] pascalParser.EmptyStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.empty"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEmpty([NotNull] pascalParser.EmptyContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.structuredStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStructuredStatement([NotNull] pascalParser.StructuredStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.compoundStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCompoundStatement([NotNull] pascalParser.CompoundStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.statements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatements([NotNull] pascalParser.StatementsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.conditionalStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConditionalStatement([NotNull] pascalParser.ConditionalStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfStatement([NotNull] pascalParser.IfStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.caseStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCaseStatement([NotNull] pascalParser.CaseStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.caseListElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCaseListElement([NotNull] pascalParser.CaseListElementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.repetetiveStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRepetetiveStatement([NotNull] pascalParser.RepetetiveStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhileStatement([NotNull] pascalParser.WhileStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.repeatStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRepeatStatement([NotNull] pascalParser.RepeatStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForStatement([NotNull] pascalParser.ForStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.forList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForList([NotNull] pascalParser.ForListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.initialValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInitialValue([NotNull] pascalParser.InitialValueContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.finalValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFinalValue([NotNull] pascalParser.FinalValueContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.withStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWithStatement([NotNull] pascalParser.WithStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="pascalParser.recordVariableList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRecordVariableList([NotNull] pascalParser.RecordVariableListContext context);
}
